commit 073eb7677dd33a43869cc6349844acd5925621df
Author: Yicheng Qin <qycqycqycqycqyc@gmail.com>
Date:   Wed Oct 1 09:33:55 2014 -0700

    etcdserver: move grep member logic into publish func

diff --git a/etcdserver/server.go b/etcdserver/server.go
index 03736a0..ccfaef4 100644
--- a/etcdserver/server.go
+++ b/etcdserver/server.go
@@ -110,9 +110,7 @@ type EtcdServer struct {
 // It also starts a goroutine to publish its server information.
 func (s *EtcdServer) Start() {
 	s.start()
-	m := *s.ClusterStore.Get().FindName(s.Name)
-	m.ClientURLs = s.ClientURLs
-	go s.publish(m, defaultPublishRetryInterval)
+	go s.publish(defaultPublishRetryInterval)
 }
 
 // start prepares and starts server in a new goroutine. It is no longer safe to
@@ -335,10 +333,14 @@ func (s *EtcdServer) sync(timeout time.Duration) {
 }
 
 // publish registers server information into the cluster. The information
-// is the json format of the given member.
+// is the json format of its self member struct, whose ClientURLs may be
+// updated.
 // The function keeps attempting to register until it succeeds,
 // or its server is stopped.
-func (s *EtcdServer) publish(m Member, retryInterval time.Duration) {
+// TODO: take care of info fetched from cluster store after having reconfig.
+func (s *EtcdServer) publish(retryInterval time.Duration) {
+	m := *s.ClusterStore.Get().FindName(s.Name)
+	m.ClientURLs = s.ClientURLs
 	b, err := json.Marshal(m)
 	if err != nil {
 		log.Printf("etcdserver: json marshal error: %v", err)
diff --git a/etcdserver/server_test.go b/etcdserver/server_test.go
index 22a473c..1055488 100644
--- a/etcdserver/server_test.go
+++ b/etcdserver/server_test.go
@@ -829,16 +829,19 @@ func TestRemoveNode(t *testing.T) {
 
 func TestPublish(t *testing.T) {
 	n := &nodeProposeDataRecorder{}
+	cs := mustClusterStore(t, []Member{{ID: 1, Name: "node1"}})
 	ch := make(chan interface{}, 1)
 	// simulate that request has gone through consensus
 	ch <- Response{}
 	w := &waitWithResponse{ch: ch}
 	srv := &EtcdServer{
-		Node: n,
-		w:    w,
+		Name:         "node1",
+		ClientURLs:   []string{"a", "b"},
+		Node:         n,
+		ClusterStore: cs,
+		w:            w,
 	}
-	m := Member{ID: 1, Name: "node1"}
-	srv.publish(m, time.Hour)
+	srv.publish(time.Hour)
 
 	data := n.data()
 	if len(data) != 1 {
@@ -851,39 +854,46 @@ func TestPublish(t *testing.T) {
 	if r.Method != "PUT" {
 		t.Errorf("method = %s, want PUT", r.Method)
 	}
-	if r.Path != m.storeKey() {
-		t.Errorf("path = %s, want %s", r.Path, m.storeKey())
+	wm := Member{ID: 1, Name: "node1", ClientURLs: []string{"a", "b"}}
+	if r.Path != wm.storeKey() {
+		t.Errorf("path = %s, want %s", r.Path, wm.storeKey())
 	}
 	var gm Member
 	if err := json.Unmarshal([]byte(r.Val), &gm); err != nil {
 		t.Fatalf("unmarshal val error: %v", err)
 	}
-	if !reflect.DeepEqual(gm, m) {
-		t.Errorf("member = %v, want %v", gm, m)
+	if !reflect.DeepEqual(gm, wm) {
+		t.Errorf("member = %v, want %v", gm, wm)
 	}
 }
 
 // TestPublishStopped tests that publish will be stopped if server is stopped.
 func TestPublishStopped(t *testing.T) {
+	cs := mustClusterStore(t, []Member{{ID: 1, Name: "node1"}})
 	srv := &EtcdServer{
-		Node: &nodeRecorder{},
-		w:    &waitRecorder{},
-		done: make(chan struct{}),
+		Name:         "node1",
+		Node:         &nodeRecorder{},
+		ClusterStore: cs,
+		w:            &waitRecorder{},
+		done:         make(chan struct{}),
 	}
 	srv.Stop()
-	srv.publish(Member{ID: 1, Name: "node1"}, time.Hour)
+	srv.publish(time.Hour)
 }
 
 // TestPublishRetry tests that publish will keep retry until success.
 func TestPublishRetry(t *testing.T) {
 	n := &nodeRecorder{}
+	cs := mustClusterStore(t, []Member{{ID: 1, Name: "node1"}})
 	srv := &EtcdServer{
-		Node: n,
-		w:    &waitRecorder{},
-		done: make(chan struct{}),
+		Name:         "node1",
+		Node:         n,
+		ClusterStore: cs,
+		w:            &waitRecorder{},
+		done:         make(chan struct{}),
 	}
 	time.AfterFunc(500*time.Microsecond, srv.Stop)
-	srv.publish(Member{ID: 1, Name: "node1"}, 10*time.Nanosecond)
+	srv.publish(10 * time.Nanosecond)
 
 	action := n.Action()
 	// multiple Propose + Stop
@@ -1197,3 +1207,11 @@ func (w *waitWithResponse) Register(id int64) <-chan interface{} {
 	return w.ch
 }
 func (w *waitWithResponse) Trigger(id int64, x interface{}) {}
+
+func mustClusterStore(t *testing.T, membs []Member) ClusterStore {
+	c := Cluster{}
+	if err := c.AddSlice(membs); err != nil {
+		t.Fatalf("error creating cluster from %v: %v", membs, err)
+	}
+	return NewClusterStore(&getAllStore{}, c)
+}
diff --git a/main.go b/main.go
index 33bcbe6..1835b73 100644
--- a/main.go
+++ b/main.go
@@ -194,7 +194,7 @@ func startEtcd() {
 
 	s := &etcdserver.EtcdServer{
 		Name:       *name,
-		ClientURLs: *addrs,
+		ClientURLs: strings.Split(acurls.String(), ","),
 		Store:      st,
 		Node:       n,
 		Storage: struct {
