commit f0686189e50ee8efb85fb80a83089102c926c3fb
Author: Gyu-Ho Lee <gyuhox@gmail.com>
Date:   Mon Feb 22 13:39:34 2016 -0800

    clientv3: README, GoDoc examples

diff --git a/clientv3/README.md b/clientv3/README.md
new file mode 100644
index 0000000..91bc5e3
--- /dev/null
+++ b/clientv3/README.md
@@ -0,0 +1,49 @@
+# etcd/clientv3
+
+[![Godoc](http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square)](https://godoc.org/github.com/coreos/etcd/clientv3)
+
+`etcd/clientv3` is the official Go etcd client for v3.
+
+## Install
+
+```bash
+go get github.com/coreos/etcd/clientv3
+```
+
+## Get started
+
+Create client using `clientv3.New`:
+
+```go
+cli, err := clientv3.New(clientv3.Config{
+	Endpoints:   []string{"localhost:12378", "localhost:22378", "localhost:32378"},
+	DialTimeout: 5 * time.Second,
+})
+if err != nil {
+	// handle error!
+}
+defer cli.Close()
+```
+
+etcd v3 uses [`gRPC`](http://www.grpc.io) for remote procedure calls. And `clientv3` uses
+[`grpc-go`](https://github.com/grpc/grpc-go) to connect to etcd. Make sure to close the client after using it. 
+If the client is not closed, the connection will cause leaky goroutines. To specify client request timeout,
+pass `context.WithTimeout` to APIs:
+
+```go
+ctx, cancel := context.WithTimeout(context.Background(), timeout)
+resp, err := kvc.Put(ctx, "sample_key", "sample_value")
+cancel()
+if err != nil {
+    // handle error!
+}
+// use the response
+```
+
+## Error Handling
+
+TODO
+
+## Examples
+
+More code examples can be found at [GoDoc](https://godoc.org/github.com/coreos/etcd/clientv3).
diff --git a/clientv3/example_kv_test.go b/clientv3/example_kv_test.go
new file mode 100644
index 0000000..425b4e6
--- /dev/null
+++ b/clientv3/example_kv_test.go
@@ -0,0 +1,78 @@
+// Copyright 2016 CoreOS, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package clientv3_test
+
+import (
+	"fmt"
+	"log"
+	"time"
+
+	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
+	"github.com/coreos/etcd/clientv3"
+)
+
+func ExampleKV_put() {
+	var (
+		dialTimeout    = 5 * time.Second
+		requestTimeout = 1 * time.Second
+	)
+	cli, err := clientv3.New(clientv3.Config{
+		Endpoints:   []string{"localhost:12378", "localhost:22378", "localhost:32378"},
+		DialTimeout: dialTimeout,
+	})
+	if err != nil {
+		log.Fatal(err)
+	}
+	defer cli.Close()
+
+	kvc := clientv3.NewKV(cli)
+
+	ctx, cancel := context.WithTimeout(context.Background(), requestTimeout)
+	resp, err := kvc.Put(ctx, "sample_key", "sample_value")
+	cancel()
+	if err != nil {
+		log.Fatal(err)
+	}
+	fmt.Println("OK")
+	fmt.Println(resp.Header)
+}
+
+func ExampleKV_get() {
+	var (
+		dialTimeout    = 5 * time.Second
+		requestTimeout = 1 * time.Second
+	)
+	cli, err := clientv3.New(clientv3.Config{
+		Endpoints:   []string{"localhost:12378", "localhost:22378", "localhost:32378"},
+		DialTimeout: dialTimeout,
+	})
+	if err != nil {
+		log.Fatal(err)
+	}
+	defer cli.Close()
+
+	kvc := clientv3.NewKV(cli)
+
+	ctx, cancel := context.WithTimeout(context.Background(), requestTimeout)
+	resp, err := kvc.Get(ctx, "sample_key")
+	cancel()
+	if err != nil {
+		log.Fatal(err)
+	}
+	fmt.Println("OK")
+	for _, ev := range resp.Kvs {
+		fmt.Printf("%s : %s\n", ev.Key, ev.Value)
+	}
+}
