commit bfd6465ea3ad6f163eb88592f2b171600aefc705
Author: Xiang Li <xiangli.cs@gmail.com>
Date:   Fri Apr 22 16:55:00 2016 -0700

    docs: update docs.md and create subdirs

diff --git a/Documentation/api_reference_v3.md b/Documentation/api_reference_v3.md
deleted file mode 100644
index 239cbfc..0000000
--- a/Documentation/api_reference_v3.md
+++ /dev/null
@@ -1,771 +0,0 @@
-### etcd API Reference
-
-
-##### service `Auth` (etcdserver/etcdserverpb/rpc.proto)
-
-| Method | Request Type | Response Type | Description |
-| ------ | ------------ | ------------- | ----------- |
-| AuthEnable | AuthEnableRequest | AuthEnableResponse | AuthEnable enables authentication. |
-| AuthDisable | AuthDisableRequest | AuthDisableResponse | AuthDisable disables authentication. |
-| Authenticate | AuthenticateRequest | AuthenticateResponse | Authenticate processes an authenticate request. |
-| UserAdd | AuthUserAddRequest | AuthUserAddResponse | UserAdd adds a new user. |
-| UserGet | AuthUserGetRequest | AuthUserGetResponse | UserGet gets detailed user information or lists all users. |
-| UserDelete | AuthUserDeleteRequest | AuthUserDeleteResponse | UserDelete deletes a specified user. |
-| UserChangePassword | AuthUserChangePasswordRequest | AuthUserChangePasswordResponse | UserChangePassword changes the password of a specified user. |
-| UserGrant | AuthUserGrantRequest | AuthUserGrantResponse | UserGrant grants a role to a specified user. |
-| UserRevoke | AuthUserRevokeRequest | AuthUserRevokeResponse | UserRevoke revokes a role of specified user. |
-| RoleAdd | AuthRoleAddRequest | AuthRoleAddResponse | RoleAdd adds a new role. |
-| RoleGet | AuthRoleGetRequest | AuthRoleGetResponse | RoleGet gets detailed role information or lists all roles. |
-| RoleDelete | AuthRoleDeleteRequest | AuthRoleDeleteResponse | RoleDelete deletes a specified role. |
-| RoleGrant | AuthRoleGrantRequest | AuthRoleGrantResponse | RoleGrant grants a permission of a specified key or range to a specified role. |
-| RoleRevoke | AuthRoleRevokeRequest | AuthRoleRevokeResponse | RoleRevoke revokes a key or range permission of a specified role. |
-
-
-
-##### service `Cluster` (etcdserver/etcdserverpb/rpc.proto)
-
-| Method | Request Type | Response Type | Description |
-| ------ | ------------ | ------------- | ----------- |
-| MemberAdd | MemberAddRequest | MemberAddResponse | MemberAdd adds a member into the cluster. |
-| MemberRemove | MemberRemoveRequest | MemberRemoveResponse | MemberRemove removes an existing member from the cluster. |
-| MemberUpdate | MemberUpdateRequest | MemberUpdateResponse | MemberUpdate updates the member configuration. |
-| MemberList | MemberListRequest | MemberListResponse | MemberList lists all the members in the cluster. |
-
-
-
-##### service `KV` (etcdserver/etcdserverpb/rpc.proto)
-
-| Method | Request Type | Response Type | Description |
-| ------ | ------------ | ------------- | ----------- |
-| Range | RangeRequest | RangeResponse | Range gets the keys in the range from the key-value store. |
-| Put | PutRequest | PutResponse | Put puts the given key into the key-value store. A put request increments the revision of the key-value store and generates one event in the event history. |
-| DeleteRange | DeleteRangeRequest | DeleteRangeResponse | Delete deletes the given range from the key-value store. A delete request increments the revision of the key-value store and generates a delete event in the event history for every deleted key. |
-| Txn | TxnRequest | TxnResponse | Txn processes multiple requests in a single transaction. A txn request increments the revision of the key-value store and generates events with the same revision for every completed request. It is not allowed to modify the same key several times within one txn. |
-| Compact | CompactionRequest | CompactionResponse | Compact compacts the event history in the etcd key-value store. The key-value store should be periodically compacted or the event history will continue to grow indefinitely. |
-
-
-
-##### service `Lease` (etcdserver/etcdserverpb/rpc.proto)
-
-| Method | Request Type | Response Type | Description |
-| ------ | ------------ | ------------- | ----------- |
-| LeaseGrant | LeaseGrantRequest | LeaseGrantResponse | LeaseGrant creates a lease which expires if the server does not receive a keepAlive within a given time to live period. All keys attached to the lease will be expired and deleted if the lease expires. Each expired key generates a delete event in the event history. |
-| LeaseRevoke | LeaseRevokeRequest | LeaseRevokeResponse | LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted. |
-| LeaseKeepAlive | LeaseKeepAliveRequest | LeaseKeepAliveResponse | LeaseKeepAlive keeps the lease alive by streaming keep alive requests from the client to the server and streaming keep alive responses from the server to the client. |
-
-
-
-##### service `Maintenance` (etcdserver/etcdserverpb/rpc.proto)
-
-| Method | Request Type | Response Type | Description |
-| ------ | ------------ | ------------- | ----------- |
-| Alarm | AlarmRequest | AlarmResponse | Alarm activates, deactivates, and queries alarms regarding cluster health. |
-| Status | StatusRequest | StatusResponse | Status gets the status of the member. |
-| Defragment | DefragmentRequest | DefragmentResponse | Defragment defragments a member's backend database to recover storage space. |
-| Hash | HashRequest | HashResponse | Hash returns the hash of the local KV state for consistency checking purpose. This is designed for testing; do not use this in production when there are ongoing transactions. |
-| Snapshot | SnapshotRequest | SnapshotResponse | Snapshot sends a snapshot of the entire backend from a member over a stream to a client. |
-
-
-
-##### service `Watch` (etcdserver/etcdserverpb/rpc.proto)
-
-| Method | Request Type | Response Type | Description |
-| ------ | ------------ | ------------- | ----------- |
-| Watch | WatchRequest | WatchResponse | Watch watches for events happening or that have happened. Both input and output are streams; the input stream is for creating and canceling watchers and the output stream sends events. One watch RPC can watch on multiple key ranges, streaming events for several watches at once. The entire event history can be watched starting from the last compaction revision. |
-
-
-
-##### message `AlarmMember` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| memberID | memberID is the ID of the member associated with the raised alarm. | uint64 |
-| alarm | alarm is the type of alarm which has been raised. | AlarmType |
-
-
-
-##### message `AlarmRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| action | action is the kind of alarm request to issue. The action may GET alarm statuses, ACTIVATE an alarm, or DEACTIVATE a raised alarm. | AlarmAction |
-| memberID | memberID is the ID of the member associated with the alarm. If memberID is 0, the alarm request covers all members. | uint64 |
-| alarm | alarm is the type of alarm to consider for this request. | AlarmType |
-
-
-
-##### message `AlarmResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| alarms | alarms is a list of alarms associated with the alarm request. | (slice of) AlarmMember |
-
-
-
-##### message `AuthDisableRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `AuthDisableResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthEnableRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `AuthEnableResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthRoleAddRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| name | name is the name of the role to add to the authentication system. | string |
-
-
-
-##### message `AuthRoleAddResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthRoleDeleteRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `AuthRoleDeleteResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthRoleGetRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `AuthRoleGetResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthRoleGrantRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| name | name is the name of the role which will be granted the permission. | string |
-| perm | perm is the permission to grant to the role. | authpb.Permission |
-
-
-
-##### message `AuthRoleGrantResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthRoleRevokeRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `AuthRoleRevokeResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthUserAddRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| name |  | string |
-| password |  | string |
-
-
-
-##### message `AuthUserAddResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthUserChangePasswordRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| name | name is the name of the user whose password is being changed. | string |
-| password | password is the new password for the user. | string |
-
-
-
-##### message `AuthUserChangePasswordResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthUserDeleteRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| name | name is the name of the user to delete. | string |
-
-
-
-##### message `AuthUserDeleteResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthUserGetRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `AuthUserGetResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthUserGrantRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| user | user is the name of the user which should be granted a given role. | string |
-| role | role is the name of the role to grant to the user. | string |
-
-
-
-##### message `AuthUserGrantResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthUserRevokeRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `AuthUserRevokeResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `AuthenticateRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| name |  | string |
-| password |  | string |
-
-
-
-##### message `AuthenticateResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| token | token is an authorized token that can be used in succeeding RPCs | string |
-
-
-
-##### message `CompactionRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-CompactionRequest compacts the key-value store upto a given revision. All superseded keys with a revision less than the compaction revision will be removed.
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| revision | revision is the key-value store revision for the compation operation. | int64 |
-| physical | physical is set so the RPC will wait until the compaction is physically applied to the local database such that compacted entries are totally removed from the backend database. | bool |
-
-
-
-##### message `CompactionResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `Compare` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| result | result is logical comparison operation for this comparison. | CompareResult |
-| target | target is the key-value field to inspect for the comparison. | CompareTarget |
-| key | key is the subject key for the comparison operation. | bytes |
-| target_union |  | oneof |
-| version | version is the version of the given key | int64 |
-| create_revision | create_revision is the creation revision of the given key | int64 |
-| mod_revision | mod_revision is the last modified revision of the given key. | int64 |
-| value | value is the value of the given key, in bytes. | bytes |
-
-
-
-##### message `DefragmentRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `DefragmentResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `DeleteRangeRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| key | key is the first key to delete in the range. | bytes |
-| range_end | range_end is the key following the last key to delete for the range [key, range_end). If range_end is not given, the range is defined to contain only the key argument. If range_end is '\0', the range is all keys greater than or equal to the key argument. | bytes |
-
-
-
-##### message `DeleteRangeResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| deleted | Deleted is the number of keys deleted by the delete range request. | int64 |
-
-
-
-##### message `HashRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `HashResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| hash | hash is the hash value computed from the responding member's key-value store. | uint32 |
-
-
-
-##### message `LeaseGrantRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| TTL | TTL is the advisory time-to-live in seconds. | int64 |
-| ID | ID is the requested ID for the lease. If ID is set to 0, the lessor chooses an ID. | int64 |
-
-
-
-##### message `LeaseGrantResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| ID | ID is the lease ID for the granted lease. | int64 |
-| TTL | TTL is the server chosen lease time-to-live in seconds. | int64 |
-| error |  | string |
-
-
-
-##### message `LeaseKeepAliveRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| ID | ID is the lease ID for the lease to keep alive. | int64 |
-
-
-
-##### message `LeaseKeepAliveResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| ID | ID is the lease ID from the keep alive request. | int64 |
-| TTL | TTL is the new time-to-live for the lease. | int64 |
-
-
-
-##### message `LeaseRevokeRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| ID | ID is the lease ID to revoke. When the ID is revoked, all associated keys will be deleted. | int64 |
-
-
-
-##### message `LeaseRevokeResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `Member` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| ID | ID is the member ID for this member. | uint64 |
-| name | name is the human-readable name of the member. If the member is not started, the name will be an empty string. | string |
-| peerURLs | peerURLs is the list of URLs the member exposes to the cluster for communication. | (slice of) string |
-| clientURLs | clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty. | (slice of) string |
-
-
-
-##### message `MemberAddRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| peerURLs | peerURLs is the list of URLs the added member will use to communicate with the cluster. | (slice of) string |
-
-
-
-##### message `MemberAddResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| member | member is the member information for the added member. | Member |
-
-
-
-##### message `MemberListRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `MemberListResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| members | members is a list of all members associated with the cluster. | (slice of) Member |
-
-
-
-##### message `MemberRemoveRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| ID | ID is the member ID of the member to remove. | uint64 |
-
-
-
-##### message `MemberRemoveResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `MemberUpdateRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| ID | ID is the member ID of the member to update. | uint64 |
-| peerURLs | peerURLs is the new list of URLs the member will use to communicate with the cluster. | (slice of) string |
-
-
-
-##### message `MemberUpdateResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `PutRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| key | key is the key, in bytes, to put into the key-value store. | bytes |
-| value | value is the value, in bytes, to associate with the key in the key-value store. | bytes |
-| lease | lease is the lease ID to associate with the key in the key-value store. A lease value of 0 indicates no lease. | int64 |
-
-
-
-##### message `PutResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-
-
-
-##### message `RangeRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| key | key is the first key for the range. If range_end is not given, the request only looks up key. | bytes |
-| range_end | range_end is the upper bound on the requested range [key, range_end). If range_end is '\0', the range is all keys >= key. | bytes |
-| limit | limit is a limit on the number of keys returned for the request. | int64 |
-| revision | revision is the point-in-time of the key-value store to use for the range. If revision is less or equal to zero, the range is over the newest key-value store. If the revision has been compacted, ErrCompaction is returned as a response. | int64 |
-| sort_order | sort_order is the order for returned sorted results. | SortOrder |
-| sort_target | sort_target is the key-value field to use for sorting. | SortTarget |
-| serializable | serializable sets the range request to use serializable member-local reads. Range requests are linearizable by default; linearizable requests have higher latency and lower throughput than serializable requests but reflect the current consensus of the cluster. For better performance, in exchange for possible stale reads, a serializable range request is served locally without needing to reach consensus with other nodes in the cluster. | bool |
-
-
-
-##### message `RangeResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| kvs | kvs is the list of key-value pairs matched by the range request. | (slice of) storagepb.KeyValue |
-| more | more indicates if there are more keys to return in the requested range. | bool |
-
-
-
-##### message `RequestUnion` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| request | request is a union of request types accepted by a transaction. | oneof |
-| request_range |  | RangeRequest |
-| request_put |  | PutRequest |
-| request_delete_range |  | DeleteRangeRequest |
-
-
-
-##### message `ResponseHeader` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| cluster_id | cluster_id is the ID of the cluster which sent the response. | uint64 |
-| member_id | member_id is the ID of the member which sent the response. | uint64 |
-| revision | revision is the key-value store revision when the request was applied. | int64 |
-| raft_term | raft_term is the raft term when the request was applied. | uint64 |
-
-
-
-##### message `ResponseUnion` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| response | response is a union of response types returned by a transaction. | oneof |
-| response_range |  | RangeResponse |
-| response_put |  | PutResponse |
-| response_delete_range |  | DeleteRangeResponse |
-
-
-
-##### message `SnapshotRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `SnapshotResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header | header has the current key-value store information. The first header in the snapshot stream indicates the point in time of the snapshot. | ResponseHeader |
-| remaining_bytes | remaining_bytes is the number of blob bytes to be sent after this message | uint64 |
-| blob | blob contains the next chunk of the snapshot in the snapshot stream. | bytes |
-
-
-
-##### message `StatusRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-Empty field.
-
-
-
-##### message `StatusResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| version | version is the cluster protocol version used by the responding member. | string |
-| dbSize | dbSize is the size of the backend database, in bytes, of the responding member. | int64 |
-| leader | leader is the member ID which the responding member believes is the current leader. | uint64 |
-| raftIndex | raftIndex is the current raft index of the responding member. | uint64 |
-| raftTerm | raftTerm is the current raft term of the responding member. | uint64 |
-
-
-
-##### message `TxnRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-From google paxosdb paper: Our implementation hinges around a powerful primitive which we call MultiOp. All other database operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically and consists of three components: 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check for the absence or presence of a value, or compare with a given value. Two different tests in the guard may apply to the same or different entries in the database. All tests in the guard are applied and MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise it executes f op (see item 3 below). 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or lookup operation, and applies to a single database entry. Two different operations in the list may apply to the same or different entries in the database. These operations are executed if guard evaluates to true. 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| compare | Compare is a list of predicates representing a conjunction of terms. If the comparisons succeed, then the success requests will be processed in order, and the response will contain their respective responses in order. If the comparisons fail, then the failure requests will be processed in order, and the response will contain their respective responses in order. | (slice of) Compare |
-| success | success is a list of requests which will be applied when compare evaluates to true. | (slice of) RequestUnion |
-| failure | failure is a list of requests which will be applied when compare evaluates to false. | (slice of) RequestUnion |
-
-
-
-##### message `TxnResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| succeeded | succeeded is set to true if the compare evaluated to true or false otherwise. | bool |
-| responses | responses is a list of responses corresponding to the results from applying success if succeeded is true or failure if succeeded is false. | (slice of) ResponseUnion |
-
-
-
-##### message `WatchCancelRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| watch_id | watch_id is the watcher id to cancel so that no more events are transmitted. | int64 |
-
-
-
-##### message `WatchCreateRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| key | key is the key to register for watching. | bytes |
-| range_end | range_end is the end of the range [key, range_end) to watch. If range_end is not given, only the key argument is watched. If range_end is equal to '\0', all keys greater than or equal to the key argument are watched. | bytes |
-| start_revision | start_revision is an optional revision to watch from (inclusive). No start_revision is "now". | int64 |
-| progress_notify | progress_notify is set so that the etcd server will periodically send a WatchResponse with no events to the new watcher if there are no recent events. It is useful when clients wish to recover a disconnected watcher starting from a recent known revision. The etcd server may decide how often it will send notifications based on current load. | bool |
-
-
-
-##### message `WatchRequest` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| request_union | request_union is a request to either create a new watcher or cancel an existing watcher. | oneof |
-| create_request |  | WatchCreateRequest |
-| cancel_request |  | WatchCancelRequest |
-
-
-
-##### message `WatchResponse` (etcdserver/etcdserverpb/rpc.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| header |  | ResponseHeader |
-| watch_id | watch_id is the ID of the watcher that corresponds to the response. | int64 |
-| created | created is set to true if the response is for a create watch request. The client should record the watch_id and expect to receive events for the created watcher from the same stream. All events sent to the created watcher will attach with the same watch_id. | bool |
-| canceled | canceled is set to true if the response is for a cancel watch request. No further events will be sent to the canceled watcher. | bool |
-| compact_revision | compact_revision is set to the minimum index if a watcher tries to watch at a compacted index.  This happens when creating a watcher at a compacted revision or the watcher cannot catch up with the progress of the key-value store.  The client should treat the watcher as canceled and should not try to create any watcher with the same start_revision again. | int64 |
-| events |  | (slice of) storagepb.Event |
-
-
-
-##### message `Event` (storage/storagepb/kv.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| type | type is the kind of event. If type is a PUT, it indicates new data has been stored to the key. If type is a DELETE, it indicates the key was deleted. | EventType |
-| kv | kv holds the KeyValue for the event. A PUT event contains current kv pair. A PUT event with kv.Version=1 indicates the creation of a key. A DELETE/EXPIRE event contains the deleted key with its modification revision set to the revision of deletion. | KeyValue |
-
-
-
-##### message `KeyValue` (storage/storagepb/kv.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| key | key is the key in bytes. An empty key is not allowed. | bytes |
-| create_revision | create_revision is the revision of last creation on this key. | int64 |
-| mod_revision | mod_revision is the revision of last modification on this key. | int64 |
-| version | version is the version of the key. A deletion resets the version to zero and any modification of the key increases its version. | int64 |
-| value | value is the value held by the key, in bytes. | bytes |
-| lease | lease is the ID of the lease that attached to key. When the attached lease expires, the key will be deleted. If lease is 0, then no lease is attached to the key. | int64 |
-
-
-
-##### message `Lease` (lease/leasepb/lease.proto)
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| ID |  | int64 |
-| TTL |  | int64 |
-
-
-
-##### message `Permission` (auth/authpb/auth.proto)
-
-Permission is a single entity
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| key |  | bytes |
-| permType |  | Type |
-
-
-
-##### message `Role` (auth/authpb/auth.proto)
-
-Role is a single entry in the bucket authRoles
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| name |  | bytes |
-| keyPermission |  | (slice of) Permission |
-
-
-
-##### message `User` (auth/authpb/auth.proto)
-
-User is a single entry in the bucket authUsers
-
-| Field | Description | Type |
-| ----- | ----------- | ---- |
-| name |  | bytes |
-| password |  | bytes |
-| roles |  | (slice of) string |
-
-
-
diff --git a/Documentation/dev-guide/api_reference_v3.md b/Documentation/dev-guide/api_reference_v3.md
new file mode 100644
index 0000000..239cbfc
--- /dev/null
+++ b/Documentation/dev-guide/api_reference_v3.md
@@ -0,0 +1,771 @@
+### etcd API Reference
+
+
+##### service `Auth` (etcdserver/etcdserverpb/rpc.proto)
+
+| Method | Request Type | Response Type | Description |
+| ------ | ------------ | ------------- | ----------- |
+| AuthEnable | AuthEnableRequest | AuthEnableResponse | AuthEnable enables authentication. |
+| AuthDisable | AuthDisableRequest | AuthDisableResponse | AuthDisable disables authentication. |
+| Authenticate | AuthenticateRequest | AuthenticateResponse | Authenticate processes an authenticate request. |
+| UserAdd | AuthUserAddRequest | AuthUserAddResponse | UserAdd adds a new user. |
+| UserGet | AuthUserGetRequest | AuthUserGetResponse | UserGet gets detailed user information or lists all users. |
+| UserDelete | AuthUserDeleteRequest | AuthUserDeleteResponse | UserDelete deletes a specified user. |
+| UserChangePassword | AuthUserChangePasswordRequest | AuthUserChangePasswordResponse | UserChangePassword changes the password of a specified user. |
+| UserGrant | AuthUserGrantRequest | AuthUserGrantResponse | UserGrant grants a role to a specified user. |
+| UserRevoke | AuthUserRevokeRequest | AuthUserRevokeResponse | UserRevoke revokes a role of specified user. |
+| RoleAdd | AuthRoleAddRequest | AuthRoleAddResponse | RoleAdd adds a new role. |
+| RoleGet | AuthRoleGetRequest | AuthRoleGetResponse | RoleGet gets detailed role information or lists all roles. |
+| RoleDelete | AuthRoleDeleteRequest | AuthRoleDeleteResponse | RoleDelete deletes a specified role. |
+| RoleGrant | AuthRoleGrantRequest | AuthRoleGrantResponse | RoleGrant grants a permission of a specified key or range to a specified role. |
+| RoleRevoke | AuthRoleRevokeRequest | AuthRoleRevokeResponse | RoleRevoke revokes a key or range permission of a specified role. |
+
+
+
+##### service `Cluster` (etcdserver/etcdserverpb/rpc.proto)
+
+| Method | Request Type | Response Type | Description |
+| ------ | ------------ | ------------- | ----------- |
+| MemberAdd | MemberAddRequest | MemberAddResponse | MemberAdd adds a member into the cluster. |
+| MemberRemove | MemberRemoveRequest | MemberRemoveResponse | MemberRemove removes an existing member from the cluster. |
+| MemberUpdate | MemberUpdateRequest | MemberUpdateResponse | MemberUpdate updates the member configuration. |
+| MemberList | MemberListRequest | MemberListResponse | MemberList lists all the members in the cluster. |
+
+
+
+##### service `KV` (etcdserver/etcdserverpb/rpc.proto)
+
+| Method | Request Type | Response Type | Description |
+| ------ | ------------ | ------------- | ----------- |
+| Range | RangeRequest | RangeResponse | Range gets the keys in the range from the key-value store. |
+| Put | PutRequest | PutResponse | Put puts the given key into the key-value store. A put request increments the revision of the key-value store and generates one event in the event history. |
+| DeleteRange | DeleteRangeRequest | DeleteRangeResponse | Delete deletes the given range from the key-value store. A delete request increments the revision of the key-value store and generates a delete event in the event history for every deleted key. |
+| Txn | TxnRequest | TxnResponse | Txn processes multiple requests in a single transaction. A txn request increments the revision of the key-value store and generates events with the same revision for every completed request. It is not allowed to modify the same key several times within one txn. |
+| Compact | CompactionRequest | CompactionResponse | Compact compacts the event history in the etcd key-value store. The key-value store should be periodically compacted or the event history will continue to grow indefinitely. |
+
+
+
+##### service `Lease` (etcdserver/etcdserverpb/rpc.proto)
+
+| Method | Request Type | Response Type | Description |
+| ------ | ------------ | ------------- | ----------- |
+| LeaseGrant | LeaseGrantRequest | LeaseGrantResponse | LeaseGrant creates a lease which expires if the server does not receive a keepAlive within a given time to live period. All keys attached to the lease will be expired and deleted if the lease expires. Each expired key generates a delete event in the event history. |
+| LeaseRevoke | LeaseRevokeRequest | LeaseRevokeResponse | LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted. |
+| LeaseKeepAlive | LeaseKeepAliveRequest | LeaseKeepAliveResponse | LeaseKeepAlive keeps the lease alive by streaming keep alive requests from the client to the server and streaming keep alive responses from the server to the client. |
+
+
+
+##### service `Maintenance` (etcdserver/etcdserverpb/rpc.proto)
+
+| Method | Request Type | Response Type | Description |
+| ------ | ------------ | ------------- | ----------- |
+| Alarm | AlarmRequest | AlarmResponse | Alarm activates, deactivates, and queries alarms regarding cluster health. |
+| Status | StatusRequest | StatusResponse | Status gets the status of the member. |
+| Defragment | DefragmentRequest | DefragmentResponse | Defragment defragments a member's backend database to recover storage space. |
+| Hash | HashRequest | HashResponse | Hash returns the hash of the local KV state for consistency checking purpose. This is designed for testing; do not use this in production when there are ongoing transactions. |
+| Snapshot | SnapshotRequest | SnapshotResponse | Snapshot sends a snapshot of the entire backend from a member over a stream to a client. |
+
+
+
+##### service `Watch` (etcdserver/etcdserverpb/rpc.proto)
+
+| Method | Request Type | Response Type | Description |
+| ------ | ------------ | ------------- | ----------- |
+| Watch | WatchRequest | WatchResponse | Watch watches for events happening or that have happened. Both input and output are streams; the input stream is for creating and canceling watchers and the output stream sends events. One watch RPC can watch on multiple key ranges, streaming events for several watches at once. The entire event history can be watched starting from the last compaction revision. |
+
+
+
+##### message `AlarmMember` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| memberID | memberID is the ID of the member associated with the raised alarm. | uint64 |
+| alarm | alarm is the type of alarm which has been raised. | AlarmType |
+
+
+
+##### message `AlarmRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| action | action is the kind of alarm request to issue. The action may GET alarm statuses, ACTIVATE an alarm, or DEACTIVATE a raised alarm. | AlarmAction |
+| memberID | memberID is the ID of the member associated with the alarm. If memberID is 0, the alarm request covers all members. | uint64 |
+| alarm | alarm is the type of alarm to consider for this request. | AlarmType |
+
+
+
+##### message `AlarmResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| alarms | alarms is a list of alarms associated with the alarm request. | (slice of) AlarmMember |
+
+
+
+##### message `AuthDisableRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `AuthDisableResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthEnableRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `AuthEnableResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthRoleAddRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| name | name is the name of the role to add to the authentication system. | string |
+
+
+
+##### message `AuthRoleAddResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthRoleDeleteRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `AuthRoleDeleteResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthRoleGetRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `AuthRoleGetResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthRoleGrantRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| name | name is the name of the role which will be granted the permission. | string |
+| perm | perm is the permission to grant to the role. | authpb.Permission |
+
+
+
+##### message `AuthRoleGrantResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthRoleRevokeRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `AuthRoleRevokeResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthUserAddRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| name |  | string |
+| password |  | string |
+
+
+
+##### message `AuthUserAddResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthUserChangePasswordRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| name | name is the name of the user whose password is being changed. | string |
+| password | password is the new password for the user. | string |
+
+
+
+##### message `AuthUserChangePasswordResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthUserDeleteRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| name | name is the name of the user to delete. | string |
+
+
+
+##### message `AuthUserDeleteResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthUserGetRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `AuthUserGetResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthUserGrantRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| user | user is the name of the user which should be granted a given role. | string |
+| role | role is the name of the role to grant to the user. | string |
+
+
+
+##### message `AuthUserGrantResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthUserRevokeRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `AuthUserRevokeResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `AuthenticateRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| name |  | string |
+| password |  | string |
+
+
+
+##### message `AuthenticateResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| token | token is an authorized token that can be used in succeeding RPCs | string |
+
+
+
+##### message `CompactionRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+CompactionRequest compacts the key-value store upto a given revision. All superseded keys with a revision less than the compaction revision will be removed.
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| revision | revision is the key-value store revision for the compation operation. | int64 |
+| physical | physical is set so the RPC will wait until the compaction is physically applied to the local database such that compacted entries are totally removed from the backend database. | bool |
+
+
+
+##### message `CompactionResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `Compare` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| result | result is logical comparison operation for this comparison. | CompareResult |
+| target | target is the key-value field to inspect for the comparison. | CompareTarget |
+| key | key is the subject key for the comparison operation. | bytes |
+| target_union |  | oneof |
+| version | version is the version of the given key | int64 |
+| create_revision | create_revision is the creation revision of the given key | int64 |
+| mod_revision | mod_revision is the last modified revision of the given key. | int64 |
+| value | value is the value of the given key, in bytes. | bytes |
+
+
+
+##### message `DefragmentRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `DefragmentResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `DeleteRangeRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| key | key is the first key to delete in the range. | bytes |
+| range_end | range_end is the key following the last key to delete for the range [key, range_end). If range_end is not given, the range is defined to contain only the key argument. If range_end is '\0', the range is all keys greater than or equal to the key argument. | bytes |
+
+
+
+##### message `DeleteRangeResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| deleted | Deleted is the number of keys deleted by the delete range request. | int64 |
+
+
+
+##### message `HashRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `HashResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| hash | hash is the hash value computed from the responding member's key-value store. | uint32 |
+
+
+
+##### message `LeaseGrantRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| TTL | TTL is the advisory time-to-live in seconds. | int64 |
+| ID | ID is the requested ID for the lease. If ID is set to 0, the lessor chooses an ID. | int64 |
+
+
+
+##### message `LeaseGrantResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| ID | ID is the lease ID for the granted lease. | int64 |
+| TTL | TTL is the server chosen lease time-to-live in seconds. | int64 |
+| error |  | string |
+
+
+
+##### message `LeaseKeepAliveRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| ID | ID is the lease ID for the lease to keep alive. | int64 |
+
+
+
+##### message `LeaseKeepAliveResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| ID | ID is the lease ID from the keep alive request. | int64 |
+| TTL | TTL is the new time-to-live for the lease. | int64 |
+
+
+
+##### message `LeaseRevokeRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| ID | ID is the lease ID to revoke. When the ID is revoked, all associated keys will be deleted. | int64 |
+
+
+
+##### message `LeaseRevokeResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `Member` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| ID | ID is the member ID for this member. | uint64 |
+| name | name is the human-readable name of the member. If the member is not started, the name will be an empty string. | string |
+| peerURLs | peerURLs is the list of URLs the member exposes to the cluster for communication. | (slice of) string |
+| clientURLs | clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty. | (slice of) string |
+
+
+
+##### message `MemberAddRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| peerURLs | peerURLs is the list of URLs the added member will use to communicate with the cluster. | (slice of) string |
+
+
+
+##### message `MemberAddResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| member | member is the member information for the added member. | Member |
+
+
+
+##### message `MemberListRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `MemberListResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| members | members is a list of all members associated with the cluster. | (slice of) Member |
+
+
+
+##### message `MemberRemoveRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| ID | ID is the member ID of the member to remove. | uint64 |
+
+
+
+##### message `MemberRemoveResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `MemberUpdateRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| ID | ID is the member ID of the member to update. | uint64 |
+| peerURLs | peerURLs is the new list of URLs the member will use to communicate with the cluster. | (slice of) string |
+
+
+
+##### message `MemberUpdateResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `PutRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| key | key is the key, in bytes, to put into the key-value store. | bytes |
+| value | value is the value, in bytes, to associate with the key in the key-value store. | bytes |
+| lease | lease is the lease ID to associate with the key in the key-value store. A lease value of 0 indicates no lease. | int64 |
+
+
+
+##### message `PutResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+
+
+
+##### message `RangeRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| key | key is the first key for the range. If range_end is not given, the request only looks up key. | bytes |
+| range_end | range_end is the upper bound on the requested range [key, range_end). If range_end is '\0', the range is all keys >= key. | bytes |
+| limit | limit is a limit on the number of keys returned for the request. | int64 |
+| revision | revision is the point-in-time of the key-value store to use for the range. If revision is less or equal to zero, the range is over the newest key-value store. If the revision has been compacted, ErrCompaction is returned as a response. | int64 |
+| sort_order | sort_order is the order for returned sorted results. | SortOrder |
+| sort_target | sort_target is the key-value field to use for sorting. | SortTarget |
+| serializable | serializable sets the range request to use serializable member-local reads. Range requests are linearizable by default; linearizable requests have higher latency and lower throughput than serializable requests but reflect the current consensus of the cluster. For better performance, in exchange for possible stale reads, a serializable range request is served locally without needing to reach consensus with other nodes in the cluster. | bool |
+
+
+
+##### message `RangeResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| kvs | kvs is the list of key-value pairs matched by the range request. | (slice of) storagepb.KeyValue |
+| more | more indicates if there are more keys to return in the requested range. | bool |
+
+
+
+##### message `RequestUnion` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| request | request is a union of request types accepted by a transaction. | oneof |
+| request_range |  | RangeRequest |
+| request_put |  | PutRequest |
+| request_delete_range |  | DeleteRangeRequest |
+
+
+
+##### message `ResponseHeader` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| cluster_id | cluster_id is the ID of the cluster which sent the response. | uint64 |
+| member_id | member_id is the ID of the member which sent the response. | uint64 |
+| revision | revision is the key-value store revision when the request was applied. | int64 |
+| raft_term | raft_term is the raft term when the request was applied. | uint64 |
+
+
+
+##### message `ResponseUnion` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| response | response is a union of response types returned by a transaction. | oneof |
+| response_range |  | RangeResponse |
+| response_put |  | PutResponse |
+| response_delete_range |  | DeleteRangeResponse |
+
+
+
+##### message `SnapshotRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `SnapshotResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header | header has the current key-value store information. The first header in the snapshot stream indicates the point in time of the snapshot. | ResponseHeader |
+| remaining_bytes | remaining_bytes is the number of blob bytes to be sent after this message | uint64 |
+| blob | blob contains the next chunk of the snapshot in the snapshot stream. | bytes |
+
+
+
+##### message `StatusRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+Empty field.
+
+
+
+##### message `StatusResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| version | version is the cluster protocol version used by the responding member. | string |
+| dbSize | dbSize is the size of the backend database, in bytes, of the responding member. | int64 |
+| leader | leader is the member ID which the responding member believes is the current leader. | uint64 |
+| raftIndex | raftIndex is the current raft index of the responding member. | uint64 |
+| raftTerm | raftTerm is the current raft term of the responding member. | uint64 |
+
+
+
+##### message `TxnRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+From google paxosdb paper: Our implementation hinges around a powerful primitive which we call MultiOp. All other database operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically and consists of three components: 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check for the absence or presence of a value, or compare with a given value. Two different tests in the guard may apply to the same or different entries in the database. All tests in the guard are applied and MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise it executes f op (see item 3 below). 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or lookup operation, and applies to a single database entry. Two different operations in the list may apply to the same or different entries in the database. These operations are executed if guard evaluates to true. 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| compare | Compare is a list of predicates representing a conjunction of terms. If the comparisons succeed, then the success requests will be processed in order, and the response will contain their respective responses in order. If the comparisons fail, then the failure requests will be processed in order, and the response will contain their respective responses in order. | (slice of) Compare |
+| success | success is a list of requests which will be applied when compare evaluates to true. | (slice of) RequestUnion |
+| failure | failure is a list of requests which will be applied when compare evaluates to false. | (slice of) RequestUnion |
+
+
+
+##### message `TxnResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| succeeded | succeeded is set to true if the compare evaluated to true or false otherwise. | bool |
+| responses | responses is a list of responses corresponding to the results from applying success if succeeded is true or failure if succeeded is false. | (slice of) ResponseUnion |
+
+
+
+##### message `WatchCancelRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| watch_id | watch_id is the watcher id to cancel so that no more events are transmitted. | int64 |
+
+
+
+##### message `WatchCreateRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| key | key is the key to register for watching. | bytes |
+| range_end | range_end is the end of the range [key, range_end) to watch. If range_end is not given, only the key argument is watched. If range_end is equal to '\0', all keys greater than or equal to the key argument are watched. | bytes |
+| start_revision | start_revision is an optional revision to watch from (inclusive). No start_revision is "now". | int64 |
+| progress_notify | progress_notify is set so that the etcd server will periodically send a WatchResponse with no events to the new watcher if there are no recent events. It is useful when clients wish to recover a disconnected watcher starting from a recent known revision. The etcd server may decide how often it will send notifications based on current load. | bool |
+
+
+
+##### message `WatchRequest` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| request_union | request_union is a request to either create a new watcher or cancel an existing watcher. | oneof |
+| create_request |  | WatchCreateRequest |
+| cancel_request |  | WatchCancelRequest |
+
+
+
+##### message `WatchResponse` (etcdserver/etcdserverpb/rpc.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| header |  | ResponseHeader |
+| watch_id | watch_id is the ID of the watcher that corresponds to the response. | int64 |
+| created | created is set to true if the response is for a create watch request. The client should record the watch_id and expect to receive events for the created watcher from the same stream. All events sent to the created watcher will attach with the same watch_id. | bool |
+| canceled | canceled is set to true if the response is for a cancel watch request. No further events will be sent to the canceled watcher. | bool |
+| compact_revision | compact_revision is set to the minimum index if a watcher tries to watch at a compacted index.  This happens when creating a watcher at a compacted revision or the watcher cannot catch up with the progress of the key-value store.  The client should treat the watcher as canceled and should not try to create any watcher with the same start_revision again. | int64 |
+| events |  | (slice of) storagepb.Event |
+
+
+
+##### message `Event` (storage/storagepb/kv.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| type | type is the kind of event. If type is a PUT, it indicates new data has been stored to the key. If type is a DELETE, it indicates the key was deleted. | EventType |
+| kv | kv holds the KeyValue for the event. A PUT event contains current kv pair. A PUT event with kv.Version=1 indicates the creation of a key. A DELETE/EXPIRE event contains the deleted key with its modification revision set to the revision of deletion. | KeyValue |
+
+
+
+##### message `KeyValue` (storage/storagepb/kv.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| key | key is the key in bytes. An empty key is not allowed. | bytes |
+| create_revision | create_revision is the revision of last creation on this key. | int64 |
+| mod_revision | mod_revision is the revision of last modification on this key. | int64 |
+| version | version is the version of the key. A deletion resets the version to zero and any modification of the key increases its version. | int64 |
+| value | value is the value held by the key, in bytes. | bytes |
+| lease | lease is the ID of the lease that attached to key. When the attached lease expires, the key will be deleted. If lease is 0, then no lease is attached to the key. | int64 |
+
+
+
+##### message `Lease` (lease/leasepb/lease.proto)
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| ID |  | int64 |
+| TTL |  | int64 |
+
+
+
+##### message `Permission` (auth/authpb/auth.proto)
+
+Permission is a single entity
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| key |  | bytes |
+| permType |  | Type |
+
+
+
+##### message `Role` (auth/authpb/auth.proto)
+
+Role is a single entry in the bucket authRoles
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| name |  | bytes |
+| keyPermission |  | (slice of) Permission |
+
+
+
+##### message `User` (auth/authpb/auth.proto)
+
+User is a single entry in the bucket authUsers
+
+| Field | Description | Type |
+| ----- | ----------- | ---- |
+| name |  | bytes |
+| password |  | bytes |
+| roles |  | (slice of) string |
+
+
+
diff --git a/Documentation/dev-guide/interacting_v3.md b/Documentation/dev-guide/interacting_v3.md
new file mode 100644
index 0000000..62b3849
--- /dev/null
+++ b/Documentation/dev-guide/interacting_v3.md
@@ -0,0 +1,243 @@
+# Interacting with etcd
+
+Users mostly interact with etcd by putting or getting the value of a key. This section describes how to do that by using etcdctl, a command line tool for interacting with etcd server. The concepts described here should apply to the gRPC APIs or client library APIs.
+
+By default, etcdctl talks to the etcd server with the v2 API for backward compatibility. For etcdctl to speak to etcd using the v3 API, the API version must be set to version 3 via the `ETCDCTL_API` environment variable.
+
+``` bash
+export ETCDCTL_API=3
+```
+
+## Write a key
+
+Applications store keys into the etcd cluster by writing to keys. Every stored key is replicated to all etcd cluster members through the Raft protocol to achieve consistency and reliability.
+
+Here is the command to set the value of key `foo` to `bar`:
+
+``` bash
+$ etcdctl put foo bar
+OK
+```
+
+## Read keys
+
+Applications can read values of keys from an etcd cluster. Queries may read a single key, or a range of keys. 
+
+Suppose the etcd cluster has stored the following keys:
+
+```
+foo = bar
+foo1 = bar1
+foo3 = bar3
+```
+
+Here is the command to read the value of key `foo`:
+
+```bash
+$ etcdctl get foo
+foo
+bar
+```
+
+Here is the command to range over the keys from `foo` to `foo9`:
+
+```bash
+$ etcdctl get foo foo9
+foo
+bar
+foo1
+bar1
+foo3
+bar3
+```
+
+## Read past version of keys
+
+Applications may want to read superseded versions of a key. For example, an application may wish to roll back to an old configuration by accessing an earlier version of a key. Alternatively, an application may want a consistent view over multiple keys through multiple requests by accessing key history.
+Since every modification to the etcd cluster key-value store increments the global revision of an etcd cluster, an application can read superseded keys by providing an older etcd revision.
+
+Suppose an etcd cluster already has the following keys:
+
+``` bash
+$ etcdctl put foo bar         # revision = 2
+$ etcdctl put foo1 bar1       # revision = 3
+$ etcdctl put foo bar_new     # revision = 4 
+$ etcdctl put foo1 bar1_new   # revision = 5
+```
+
+Here are an example to access the past versions of keys:
+
+```bash
+$ etcdctl get foo foo9 # access the most recent versions of keys
+foo
+bar_new
+foo1
+bar1_new
+
+$ etcdctl get --rev=4 foo foo9 # access the versions of keys at revision 4
+foo
+bar_new
+foo1
+bar1
+
+$ etcdctl get --rev=3 foo foo9 # access the versions of keys at revision 3
+foo
+bar
+foo1
+bar1
+
+$ etcdctl get --rev=2 foo foo9 # access the versions of keys at revision 2
+foo
+bar
+
+$ etcdctl get --rev=1 foo foo9 # access the versions of keys at revision 1
+```
+
+## Delete keys
+
+Applications can delete a key or a range of keys from an etcd cluster.
+
+Here is the command to delete key `foo`:
+
+```bash
+$ etcdctl del foo
+1 # one key is deleted
+```
+
+Here is the command to delete keys ranging from `foo` to `foo9`:
+
+```bash
+$ etcdctl del foo foo9
+2 # two keys are deleted
+```
+
+## Watch key changes
+
+Applications can watch on a key or a range of keys to monitor for any updates.
+
+Here is the command to watch on key `foo`:
+
+```bash
+$ etcdctl watch foo 
+# in another terminal: etcdctl put foo bar
+foo
+bar
+```
+
+Here is the command to watch on a range key from `foo` to `foo9`:
+
+```bash
+$ etcdctl watch foo foo9
+# in another terminal: etcdctl put foo bar
+foo
+bar
+# in another terminal: etcdctl put foo1 bar1
+foo1
+bar1
+```
+
+## Watch historical changes of keys
+
+Applications may want to watch for historical changes of keys in etcd. For example, an application may wish to receive all the modifications of a key; if the application stays connected to etcd, then `watch` is good enough. However, if the application or etcd fails, a change may happen during the failure, and the application will not receive the update in real time. To guarantee the update is delivered, the application must be able to watch for historical changes to keys. To do this, an application can specify a historical revision on a watch, just like reading past version of keys.
+
+Suppose we finished the following sequence of operations:
+
+``` bash
+etcdctl put foo bar         # revision = 2
+etcdctl put foo1 bar1       # revision = 3
+etcdctl put foo bar_new     # revision = 4 
+etcdctl put foo1 bar1_new   # revision = 5
+```
+
+Here is an example to watch the historical changes:
+```bash
+# watch for changes on key `foo` since revision 2
+$ etcdctl watch --rev=2 foo
+PUT
+foo
+bar
+PUT
+foo
+bar_new
+
+# watch for changes on key `foo` since revision 3
+$ etcdctl watch --rev=3 foo
+PUT
+foo
+bar_new
+```
+
+## Compacted revisions
+
+As we mentioned, etcd keeps revisions so that applications can read past versions of keys. However, to avoid accumulating an unbounded amount of history, it is important to compact past revisions. After compacting, etcd removes historical revisions, releasing resources for future use. All superseded data with revisions before the compacted revision will be unavailable.
+
+Here is the command to compact the revisions:
+
+```bash
+$ etcdctl compact 5
+compacted revision 5
+
+# any revisions before the compacted one are not accessible
+$ etcdctl get --rev=4 foo
+Error:  rpc error: code = 11 desc = etcdserver: storage: required revision has been compacted
+```
+
+## Grant leases
+
+Applications can grant leases for keys from an etcd cluster. When a key is attached to a lease, its lifetime is bound to the lease's lifetime which in turn is governed by a time-to-live (TTL). Each lease has a minimum time-to-live (TTL) value specified by the application at grant time. The lease's actual TTL value is at least the minimum TTL and is chosen by the etcd cluster. Once a lease's TTL elapses, the lease expires and all attached keys are deleted.
+
+Here is the command to grant a lease:
+
+```
+# grant a lease with 10 second TTL
+$ etcdctl lease grant 10
+lease 32695410dcc0ca06 granted with TTL(10s)
+
+# attach key foo to lease 32695410dcc0ca06
+$ etcdctl put --lease=32695410dcc0ca06 foo bar
+OK
+```
+
+## Revoke leases
+
+Applications revoke leases by lease ID. Revoking a lease deletes all of its attached keys.
+
+Suppose we finished the following sequence of operations:
+
+```
+$ etcdctl lease grant 10
+lease 32695410dcc0ca06 granted with TTL(10s)
+$ etcdctl put --lease=32695410dcc0ca06 foo bar
+OK
+```
+
+Here is the command to revoke the same lease:
+
+```
+$ etcdctl lease revoke 32695410dcc0ca06
+lease 32695410dcc0ca06 revoked
+
+$ etcdctl get foo
+# empty response since foo is deleted due to lease revocation
+```
+
+## Keep leases alive
+
+Applications can keep a lease alive by refreshing its TTL so it does not expire.
+
+Suppose we finished the following sequence of operations:
+
+```
+$ etcdctl lease grant 10
+lease 32695410dcc0ca06 granted with TTL(10s)
+```
+
+Here is the command to keep the same lease alive:
+
+```
+$ etcdctl lease keep-alive 32695410dcc0ca0
+lease 32695410dcc0ca0 keepalived with TTL(100)
+lease 32695410dcc0ca0 keepalived with TTL(100)
+lease 32695410dcc0ca0 keepalived with TTL(100)
+...
+```
\ No newline at end of file
diff --git a/Documentation/dev-guide/local_cluster.md b/Documentation/dev-guide/local_cluster.md
new file mode 100644
index 0000000..1d82e23
--- /dev/null
+++ b/Documentation/dev-guide/local_cluster.md
@@ -0,0 +1,90 @@
+# Setup a Local Cluster
+
+For testing and development deployments, the quickest and easiest way is to set up a local cluster. For a production deployment, refer to the [clustering][clustering] section.
+
+## Local Standalone Cluster
+
+Deploying an etcd cluster as a standalone cluster is straightforward. Start it with just one command:
+
+```
+$ ./etcd
+...
+```
+
+The started etcd member listens on `localhost:2379` for client requests.
+
+To interact with the started cluster by using etcdctl:
+
+```
+# use API version 3
+$ export ETCDCTL_API=3
+
+$ ./etcdctl put foo bar
+OK
+
+$ ./etcdctl get foo
+bar
+```
+
+## Local Multi-member Cluster
+
+A Procfile is provided to easily set up a local multi-member cluster. Start a multi-member cluster with a few commands:
+
+```
+# install goreman program to control Profile-based applications.
+$ go get github.com/mattn/goreman
+$ goreman -f Procfile start
+...
+```
+
+The started members listen on `localhost:12379`, `localhost:22379`, and `localhost:32379` for client requests respectively.
+
+To interact with the started cluster by using etcdctl:
+
+```
+# use API version 3
+$ export ETCDCTL_API=3
+
+$ etcdctl --endpoints=localhost:12379 member list
++------------------+---------+--------+------------------------+------------------------+
+|        ID        | STATUS  |  NAME  |       PEER ADDRS       |      CLIENT ADDRS      |
++------------------+---------+--------+------------------------+------------------------+
+| 8211f1d0f64f3269 | started | infra1 | http://127.0.0.1:12380 | http://127.0.0.1:12379 |
+| 91bc3c398fb3c146 | started | infra2 | http://127.0.0.1:22380 | http://127.0.0.1:22379 |
+| fd422379fda50e48 | started | infra3 | http://127.0.0.1:32380 | http://127.0.0.1:32379 |
++------------------+---------+--------+------------------------+------------------------+
+
+$ etcdctl --endpoints=localhost:12379 put foo bar
+OK
+```
+
+To exercise etcd's fault tolerance, kill a member:
+
+```
+# kill etcd2
+$ goreman run stop etcd2
+
+$ etcdctl --endpoints=localhost:12379 put key hello
+OK
+
+$ etcdctl --endpoints=localhost:12379 get key
+hello
+
+# try to get key from the killed member
+$ etcdctl --endpoints=localhost:22379 get key
+2016/04/18 23:07:35 grpc: Conn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp 127.0.0.1:22379: getsockopt: connection refused"; Reconnecting to "localhost:22379"
+Error:  grpc: timed out trying to connect
+
+# restart the killed member
+$ goreman run restart etcd2
+
+# get the key from restarted member
+$ etcdctl --endpoints=localhost:22379 get key
+hello
+```
+
+To learn more about interacting with etcd, read [interacting with etcd section][interacting].
+
+[interacting]: ./interacting_v3.md
+[clustering]: ./clustering.md
+
diff --git a/Documentation/dev-internal/logging.md b/Documentation/dev-internal/logging.md
new file mode 100644
index 0000000..d8729d1
--- /dev/null
+++ b/Documentation/dev-internal/logging.md
@@ -0,0 +1,29 @@
+# Logging Conventions
+
+etcd uses the [capnslog][capnslog] library for logging application output categorized into *levels*. A log message's level is determined according to these conventions:
+
+* Error: Data has been lost, a request has failed for a bad reason, or a required resource has been lost
+  * Examples: 
+    * A failure to allocate disk space for WAL
+
+* Warning: (Hopefully) Temporary conditions that may cause errors, but may work fine. A replica disappearing (that may reconnect) is a warning.
+  * Examples:
+    * Failure to send raft message to a remote peer
+    * Failure to receive heartbeat message within the configured election timeout
+
+* Notice: Normal, but important (uncommon) log information.
+  * Examples:
+    * Add a new node into the cluster
+    * Add a new user into auth subsystem
+
+* Info: Normal, working log information, everything is fine, but helpful notices for auditing or common operations.
+  * Examples:
+    * Startup configuration
+    * Start to do snapshot
+
+* Debug: Everything is still fine, but even common operations may be logged, and less helpful but more quantity of notices.
+  * Examples:
+    * Send a normal message to a remote peer
+    * Write a log entry to disk
+
+[capnslog]: [https://github.com/coreos/pkg/tree/master/capnslog]
\ No newline at end of file
diff --git a/Documentation/dev-internal/release.md b/Documentation/dev-internal/release.md
new file mode 100644
index 0000000..3dc6962
--- /dev/null
+++ b/Documentation/dev-internal/release.md
@@ -0,0 +1,109 @@
+# etcd release guide
+
+The guide talks about how to release a new version of etcd.
+
+The procedure includes some manual steps for sanity checking but it can probably be further scripted. Please keep this document up-to-date if you want to make changes to the release process. 
+
+## Prepare Release
+
+Set desired version as environment variable for following steps. Here is an example to release 2.3.0:
+
+```
+export VERSION=v2.3.0
+export PREV_VERSION=v2.2.5
+```
+
+All releases version numbers follow the format of [semantic versioning 2.0.0](http://semver.org/).
+
+### Major, Minor Version Release, or its Pre-release
+
+- Ensure the relevant milestone on GitHub is complete. All referenced issues should be closed, or moved elsewhere.
+- Remove this release from [roadmap](https://github.com/coreos/etcd/blob/master/ROADMAP.md), if necessary.
+- Ensure the latest upgrade documentation is available.
+- Bump [hardcoded MinClusterVerion in the repository](https://github.com/coreos/etcd/blob/master/version/version.go#L29), if necessary.
+- Add feature capability maps for the new version, if necessary.
+
+### Patch Version Release
+
+- Discuss about commits that are backported to the patch release. The commits should not include merge commits.
+- Cherry-pick these commits starting from the oldest one into stable branch.
+
+## Write Release Note
+
+- Write introduction for the new release. For example, what major bug we fix, what new features we introduce or what performance improvement we make.
+- Write changelog for the last release. ChangeLog should be straightforward and easy to understand for the end-user.
+- Put `[GH XXXX]` at the head of change line to reference Pull Request that introduces the change. Moreover, add a link on it to jump to the Pull Request.
+
+## Tag Version
+
+- Bump [hardcoded Version in the repository](https://github.com/coreos/etcd/blob/master/version/version.go#L30) to the latest version `${VERSION}`.
+- Ensure all tests on CI system are passed.
+- Manually check etcd is buildable in Linux, Darwin and Windows.
+- Manually check upgrade etcd cluster of previous minor version works well.
+- Manually check new features work well.
+- Add a signed tag through `git tag -s ${VERSION}`.
+- Sanity check tag correctness through `git show tags/$VERSION`.
+- Push the tag to GitHub through `git push origin tags/$VERSION`. This assumes `origin` corresponds to "https://github.com/coreos/etcd".
+
+## Build Release Binaries and Images
+
+- Ensure `actool` is available, or installing it through `go get github.com/appc/spec/actool`.
+- Ensure `docker` is available.
+
+Run release script in root directory:
+
+```
+./scripts/release.sh ${VERSION}
+```
+
+It generates all release binaries and images under directory ./release.
+
+## Sign Binaries and Images
+
+etcd project key must be used to sign the generated binaries and images.`$SUBKEYID` is the key ID of etcd project Yubikey. Connect the key and run `gpg2 --card-status` to get the ID.
+
+The following commands are used for public release sign:
+
+```
+cd release
+for i in etcd-*{.zip,.tar.gz}; do gpg2 --default-key $SUBKEYID --output ${i}.asc --detach-sign ${i}; done
+for i in etcd-*{.zip,.tar.gz}; do gpg2 --verify ${i}.asc ${i}; done
+```
+
+The public key for GPG signing can be found at [CoreOS Application Signing Key](https://coreos.com/security/app-signing-key)
+
+
+## Publish Release Page in GitHub
+
+- Set release title as the version name.
+- Follow the format of previous release pages.
+- Attach the generated binaries, aci image and signatures.
+- Select whether it is a pre-release.
+- Publish the release!
+
+## Publish Docker Image in Quay.io
+
+- Push docker image:
+
+```
+docker login quay.io
+docker push quay.io/coreos/etcd:${VERSION}
+```
+
+- Add `latest` tag to the new image on [quay.io](https://quay.io/repository/coreos/etcd?tag=latest&tab=tags) if this is a stable release.
+
+## Announce to etcd-dev Googlegroup
+
+- Follow the format of [previous release emails](https://groups.google.com/forum/#!forum/etcd-dev).
+- Make sure to include a list of authors that contributed since the previous release - something like the following might be handy:
+
+```
+git log ...${PREV_VERSION} --pretty=format:"%an" | sort | uniq | tr '\n' ',' | sed -e 's#,#, #g' -e 's#, $##'
+```
+
+- Send email to etcd-dev@googlegroups.com
+
+## Post Release
+
+- Create new stable branch through `git push origin ${VERSION_MAJOR}.${VERSION_MINOR}` if this is a major stable release. This assumes `origin` corresponds to "https://github.com/coreos/etcd".
+- Bump [hardcoded Version in the repository](https://github.com/coreos/etcd/blob/master/version/version.go#L30) to the version `${VERSION}+git`.
diff --git a/Documentation/dev/logging.md b/Documentation/dev/logging.md
deleted file mode 100644
index d8729d1..0000000
--- a/Documentation/dev/logging.md
+++ /dev/null
@@ -1,29 +0,0 @@
-# Logging Conventions
-
-etcd uses the [capnslog][capnslog] library for logging application output categorized into *levels*. A log message's level is determined according to these conventions:
-
-* Error: Data has been lost, a request has failed for a bad reason, or a required resource has been lost
-  * Examples: 
-    * A failure to allocate disk space for WAL
-
-* Warning: (Hopefully) Temporary conditions that may cause errors, but may work fine. A replica disappearing (that may reconnect) is a warning.
-  * Examples:
-    * Failure to send raft message to a remote peer
-    * Failure to receive heartbeat message within the configured election timeout
-
-* Notice: Normal, but important (uncommon) log information.
-  * Examples:
-    * Add a new node into the cluster
-    * Add a new user into auth subsystem
-
-* Info: Normal, working log information, everything is fine, but helpful notices for auditing or common operations.
-  * Examples:
-    * Startup configuration
-    * Start to do snapshot
-
-* Debug: Everything is still fine, but even common operations may be logged, and less helpful but more quantity of notices.
-  * Examples:
-    * Send a normal message to a remote peer
-    * Write a log entry to disk
-
-[capnslog]: [https://github.com/coreos/pkg/tree/master/capnslog]
\ No newline at end of file
diff --git a/Documentation/dev/release.md b/Documentation/dev/release.md
deleted file mode 100644
index 3dc6962..0000000
--- a/Documentation/dev/release.md
+++ /dev/null
@@ -1,109 +0,0 @@
-# etcd release guide
-
-The guide talks about how to release a new version of etcd.
-
-The procedure includes some manual steps for sanity checking but it can probably be further scripted. Please keep this document up-to-date if you want to make changes to the release process. 
-
-## Prepare Release
-
-Set desired version as environment variable for following steps. Here is an example to release 2.3.0:
-
-```
-export VERSION=v2.3.0
-export PREV_VERSION=v2.2.5
-```
-
-All releases version numbers follow the format of [semantic versioning 2.0.0](http://semver.org/).
-
-### Major, Minor Version Release, or its Pre-release
-
-- Ensure the relevant milestone on GitHub is complete. All referenced issues should be closed, or moved elsewhere.
-- Remove this release from [roadmap](https://github.com/coreos/etcd/blob/master/ROADMAP.md), if necessary.
-- Ensure the latest upgrade documentation is available.
-- Bump [hardcoded MinClusterVerion in the repository](https://github.com/coreos/etcd/blob/master/version/version.go#L29), if necessary.
-- Add feature capability maps for the new version, if necessary.
-
-### Patch Version Release
-
-- Discuss about commits that are backported to the patch release. The commits should not include merge commits.
-- Cherry-pick these commits starting from the oldest one into stable branch.
-
-## Write Release Note
-
-- Write introduction for the new release. For example, what major bug we fix, what new features we introduce or what performance improvement we make.
-- Write changelog for the last release. ChangeLog should be straightforward and easy to understand for the end-user.
-- Put `[GH XXXX]` at the head of change line to reference Pull Request that introduces the change. Moreover, add a link on it to jump to the Pull Request.
-
-## Tag Version
-
-- Bump [hardcoded Version in the repository](https://github.com/coreos/etcd/blob/master/version/version.go#L30) to the latest version `${VERSION}`.
-- Ensure all tests on CI system are passed.
-- Manually check etcd is buildable in Linux, Darwin and Windows.
-- Manually check upgrade etcd cluster of previous minor version works well.
-- Manually check new features work well.
-- Add a signed tag through `git tag -s ${VERSION}`.
-- Sanity check tag correctness through `git show tags/$VERSION`.
-- Push the tag to GitHub through `git push origin tags/$VERSION`. This assumes `origin` corresponds to "https://github.com/coreos/etcd".
-
-## Build Release Binaries and Images
-
-- Ensure `actool` is available, or installing it through `go get github.com/appc/spec/actool`.
-- Ensure `docker` is available.
-
-Run release script in root directory:
-
-```
-./scripts/release.sh ${VERSION}
-```
-
-It generates all release binaries and images under directory ./release.
-
-## Sign Binaries and Images
-
-etcd project key must be used to sign the generated binaries and images.`$SUBKEYID` is the key ID of etcd project Yubikey. Connect the key and run `gpg2 --card-status` to get the ID.
-
-The following commands are used for public release sign:
-
-```
-cd release
-for i in etcd-*{.zip,.tar.gz}; do gpg2 --default-key $SUBKEYID --output ${i}.asc --detach-sign ${i}; done
-for i in etcd-*{.zip,.tar.gz}; do gpg2 --verify ${i}.asc ${i}; done
-```
-
-The public key for GPG signing can be found at [CoreOS Application Signing Key](https://coreos.com/security/app-signing-key)
-
-
-## Publish Release Page in GitHub
-
-- Set release title as the version name.
-- Follow the format of previous release pages.
-- Attach the generated binaries, aci image and signatures.
-- Select whether it is a pre-release.
-- Publish the release!
-
-## Publish Docker Image in Quay.io
-
-- Push docker image:
-
-```
-docker login quay.io
-docker push quay.io/coreos/etcd:${VERSION}
-```
-
-- Add `latest` tag to the new image on [quay.io](https://quay.io/repository/coreos/etcd?tag=latest&tab=tags) if this is a stable release.
-
-## Announce to etcd-dev Googlegroup
-
-- Follow the format of [previous release emails](https://groups.google.com/forum/#!forum/etcd-dev).
-- Make sure to include a list of authors that contributed since the previous release - something like the following might be handy:
-
-```
-git log ...${PREV_VERSION} --pretty=format:"%an" | sort | uniq | tr '\n' ',' | sed -e 's#,#, #g' -e 's#, $##'
-```
-
-- Send email to etcd-dev@googlegroups.com
-
-## Post Release
-
-- Create new stable branch through `git push origin ${VERSION_MAJOR}.${VERSION_MINOR}` if this is a major stable release. This assumes `origin` corresponds to "https://github.com/coreos/etcd".
-- Bump [hardcoded Version in the repository](https://github.com/coreos/etcd/blob/master/version/version.go#L30) to the version `${VERSION}+git`.
diff --git a/Documentation/docs.md b/Documentation/docs.md
index 1d1a0d9..2098b60 100644
--- a/Documentation/docs.md
+++ b/Documentation/docs.md
@@ -8,11 +8,11 @@ New to etcd? Start by [downloading and building][download_build] etcd!
 
 ## Developing with etcd
 
-Want to develop applications with etcd? Start by setting up a local cluster!
+Want to develop applications with etcd? Start by [setting up a local cluster][local_cluster]!
 
- - Setting up local clusters
- - Interacting with etcd
- - API references
+ - [Setting up local clusters][local_cluster]
+ - [Interacting with etcd][interacting]
+ - [API references][api_ref]
 
 ## Operating etcd clusters
 
@@ -22,7 +22,7 @@ Want to operate etcd clusters? Start by setting up a cluster on multiple machine
  - Configuration
  - Security
  - Monitoring
- - Maintenance
+ - [Maintenance][maintenance]
  - Disaster recovery
  - Performance
 
@@ -33,10 +33,15 @@ Want to learn more about the concepts and internals behind etcd? Read the follow
  - Why etcd
  - Concepts
  - Internals
- - Glossary
+ - [Glossary][glossary]
 
 ## Upgrading and compatibility
 
 ## Troubleshooting
 
-[download_build]: dl_build.md
\ No newline at end of file
+[api_ref]: dev-guide/api_reference_v3.md
+[download_build]: dl_build.md
+[glossary]: learning/glossary.md
+[interacting]: dev-guide/interacting_v3.md
+[local_cluster]: dev-guide/local_cluster.md
+[maintenance]: op_guide/maintenance.md
\ No newline at end of file
diff --git a/Documentation/glossary.md b/Documentation/glossary.md
deleted file mode 100644
index e9ed840..0000000
--- a/Documentation/glossary.md
+++ /dev/null
@@ -1,35 +0,0 @@
-# Glossary
-
-This document defines the various terms used in etcd documentation, command line and source code.
-
-## Node
-
-Node is an instance of raft state machine.
-
-It has a unique identification, and records other nodes' progress internally when it is the leader.
-
-## Member
-
-Member is an instance of etcd. It hosts a node, and provides service to clients.
-
-## Cluster
-
-Cluster consists of several members.
-
-The node in each member follows raft consensus protocol to replicate logs. Cluster receives proposals from members, commits them and apply to local store.
-
-## Peer
-
-Peer is another member of the same cluster.
-
-## Proposal
-
-A proposal is a request (for example a write request, a configuration change request) that needs to go through raft protocol.
-
-## Client
-
-Client is a caller of the cluster's HTTP API.
-
-## Machine (deprecated)
-
-The alternative of Member in etcd before 2.0
diff --git a/Documentation/interacting_v3.md b/Documentation/interacting_v3.md
deleted file mode 100644
index 62b3849..0000000
--- a/Documentation/interacting_v3.md
+++ /dev/null
@@ -1,243 +0,0 @@
-# Interacting with etcd
-
-Users mostly interact with etcd by putting or getting the value of a key. This section describes how to do that by using etcdctl, a command line tool for interacting with etcd server. The concepts described here should apply to the gRPC APIs or client library APIs.
-
-By default, etcdctl talks to the etcd server with the v2 API for backward compatibility. For etcdctl to speak to etcd using the v3 API, the API version must be set to version 3 via the `ETCDCTL_API` environment variable.
-
-``` bash
-export ETCDCTL_API=3
-```
-
-## Write a key
-
-Applications store keys into the etcd cluster by writing to keys. Every stored key is replicated to all etcd cluster members through the Raft protocol to achieve consistency and reliability.
-
-Here is the command to set the value of key `foo` to `bar`:
-
-``` bash
-$ etcdctl put foo bar
-OK
-```
-
-## Read keys
-
-Applications can read values of keys from an etcd cluster. Queries may read a single key, or a range of keys. 
-
-Suppose the etcd cluster has stored the following keys:
-
-```
-foo = bar
-foo1 = bar1
-foo3 = bar3
-```
-
-Here is the command to read the value of key `foo`:
-
-```bash
-$ etcdctl get foo
-foo
-bar
-```
-
-Here is the command to range over the keys from `foo` to `foo9`:
-
-```bash
-$ etcdctl get foo foo9
-foo
-bar
-foo1
-bar1
-foo3
-bar3
-```
-
-## Read past version of keys
-
-Applications may want to read superseded versions of a key. For example, an application may wish to roll back to an old configuration by accessing an earlier version of a key. Alternatively, an application may want a consistent view over multiple keys through multiple requests by accessing key history.
-Since every modification to the etcd cluster key-value store increments the global revision of an etcd cluster, an application can read superseded keys by providing an older etcd revision.
-
-Suppose an etcd cluster already has the following keys:
-
-``` bash
-$ etcdctl put foo bar         # revision = 2
-$ etcdctl put foo1 bar1       # revision = 3
-$ etcdctl put foo bar_new     # revision = 4 
-$ etcdctl put foo1 bar1_new   # revision = 5
-```
-
-Here are an example to access the past versions of keys:
-
-```bash
-$ etcdctl get foo foo9 # access the most recent versions of keys
-foo
-bar_new
-foo1
-bar1_new
-
-$ etcdctl get --rev=4 foo foo9 # access the versions of keys at revision 4
-foo
-bar_new
-foo1
-bar1
-
-$ etcdctl get --rev=3 foo foo9 # access the versions of keys at revision 3
-foo
-bar
-foo1
-bar1
-
-$ etcdctl get --rev=2 foo foo9 # access the versions of keys at revision 2
-foo
-bar
-
-$ etcdctl get --rev=1 foo foo9 # access the versions of keys at revision 1
-```
-
-## Delete keys
-
-Applications can delete a key or a range of keys from an etcd cluster.
-
-Here is the command to delete key `foo`:
-
-```bash
-$ etcdctl del foo
-1 # one key is deleted
-```
-
-Here is the command to delete keys ranging from `foo` to `foo9`:
-
-```bash
-$ etcdctl del foo foo9
-2 # two keys are deleted
-```
-
-## Watch key changes
-
-Applications can watch on a key or a range of keys to monitor for any updates.
-
-Here is the command to watch on key `foo`:
-
-```bash
-$ etcdctl watch foo 
-# in another terminal: etcdctl put foo bar
-foo
-bar
-```
-
-Here is the command to watch on a range key from `foo` to `foo9`:
-
-```bash
-$ etcdctl watch foo foo9
-# in another terminal: etcdctl put foo bar
-foo
-bar
-# in another terminal: etcdctl put foo1 bar1
-foo1
-bar1
-```
-
-## Watch historical changes of keys
-
-Applications may want to watch for historical changes of keys in etcd. For example, an application may wish to receive all the modifications of a key; if the application stays connected to etcd, then `watch` is good enough. However, if the application or etcd fails, a change may happen during the failure, and the application will not receive the update in real time. To guarantee the update is delivered, the application must be able to watch for historical changes to keys. To do this, an application can specify a historical revision on a watch, just like reading past version of keys.
-
-Suppose we finished the following sequence of operations:
-
-``` bash
-etcdctl put foo bar         # revision = 2
-etcdctl put foo1 bar1       # revision = 3
-etcdctl put foo bar_new     # revision = 4 
-etcdctl put foo1 bar1_new   # revision = 5
-```
-
-Here is an example to watch the historical changes:
-```bash
-# watch for changes on key `foo` since revision 2
-$ etcdctl watch --rev=2 foo
-PUT
-foo
-bar
-PUT
-foo
-bar_new
-
-# watch for changes on key `foo` since revision 3
-$ etcdctl watch --rev=3 foo
-PUT
-foo
-bar_new
-```
-
-## Compacted revisions
-
-As we mentioned, etcd keeps revisions so that applications can read past versions of keys. However, to avoid accumulating an unbounded amount of history, it is important to compact past revisions. After compacting, etcd removes historical revisions, releasing resources for future use. All superseded data with revisions before the compacted revision will be unavailable.
-
-Here is the command to compact the revisions:
-
-```bash
-$ etcdctl compact 5
-compacted revision 5
-
-# any revisions before the compacted one are not accessible
-$ etcdctl get --rev=4 foo
-Error:  rpc error: code = 11 desc = etcdserver: storage: required revision has been compacted
-```
-
-## Grant leases
-
-Applications can grant leases for keys from an etcd cluster. When a key is attached to a lease, its lifetime is bound to the lease's lifetime which in turn is governed by a time-to-live (TTL). Each lease has a minimum time-to-live (TTL) value specified by the application at grant time. The lease's actual TTL value is at least the minimum TTL and is chosen by the etcd cluster. Once a lease's TTL elapses, the lease expires and all attached keys are deleted.
-
-Here is the command to grant a lease:
-
-```
-# grant a lease with 10 second TTL
-$ etcdctl lease grant 10
-lease 32695410dcc0ca06 granted with TTL(10s)
-
-# attach key foo to lease 32695410dcc0ca06
-$ etcdctl put --lease=32695410dcc0ca06 foo bar
-OK
-```
-
-## Revoke leases
-
-Applications revoke leases by lease ID. Revoking a lease deletes all of its attached keys.
-
-Suppose we finished the following sequence of operations:
-
-```
-$ etcdctl lease grant 10
-lease 32695410dcc0ca06 granted with TTL(10s)
-$ etcdctl put --lease=32695410dcc0ca06 foo bar
-OK
-```
-
-Here is the command to revoke the same lease:
-
-```
-$ etcdctl lease revoke 32695410dcc0ca06
-lease 32695410dcc0ca06 revoked
-
-$ etcdctl get foo
-# empty response since foo is deleted due to lease revocation
-```
-
-## Keep leases alive
-
-Applications can keep a lease alive by refreshing its TTL so it does not expire.
-
-Suppose we finished the following sequence of operations:
-
-```
-$ etcdctl lease grant 10
-lease 32695410dcc0ca06 granted with TTL(10s)
-```
-
-Here is the command to keep the same lease alive:
-
-```
-$ etcdctl lease keep-alive 32695410dcc0ca0
-lease 32695410dcc0ca0 keepalived with TTL(100)
-lease 32695410dcc0ca0 keepalived with TTL(100)
-lease 32695410dcc0ca0 keepalived with TTL(100)
-...
-```
\ No newline at end of file
diff --git a/Documentation/learning/glossary.md b/Documentation/learning/glossary.md
new file mode 100644
index 0000000..e9ed840
--- /dev/null
+++ b/Documentation/learning/glossary.md
@@ -0,0 +1,35 @@
+# Glossary
+
+This document defines the various terms used in etcd documentation, command line and source code.
+
+## Node
+
+Node is an instance of raft state machine.
+
+It has a unique identification, and records other nodes' progress internally when it is the leader.
+
+## Member
+
+Member is an instance of etcd. It hosts a node, and provides service to clients.
+
+## Cluster
+
+Cluster consists of several members.
+
+The node in each member follows raft consensus protocol to replicate logs. Cluster receives proposals from members, commits them and apply to local store.
+
+## Peer
+
+Peer is another member of the same cluster.
+
+## Proposal
+
+A proposal is a request (for example a write request, a configuration change request) that needs to go through raft protocol.
+
+## Client
+
+Client is a caller of the cluster's HTTP API.
+
+## Machine (deprecated)
+
+The alternative of Member in etcd before 2.0
diff --git a/Documentation/local_cluster.md b/Documentation/local_cluster.md
deleted file mode 100644
index 1d82e23..0000000
--- a/Documentation/local_cluster.md
+++ /dev/null
@@ -1,90 +0,0 @@
-# Setup a Local Cluster
-
-For testing and development deployments, the quickest and easiest way is to set up a local cluster. For a production deployment, refer to the [clustering][clustering] section.
-
-## Local Standalone Cluster
-
-Deploying an etcd cluster as a standalone cluster is straightforward. Start it with just one command:
-
-```
-$ ./etcd
-...
-```
-
-The started etcd member listens on `localhost:2379` for client requests.
-
-To interact with the started cluster by using etcdctl:
-
-```
-# use API version 3
-$ export ETCDCTL_API=3
-
-$ ./etcdctl put foo bar
-OK
-
-$ ./etcdctl get foo
-bar
-```
-
-## Local Multi-member Cluster
-
-A Procfile is provided to easily set up a local multi-member cluster. Start a multi-member cluster with a few commands:
-
-```
-# install goreman program to control Profile-based applications.
-$ go get github.com/mattn/goreman
-$ goreman -f Procfile start
-...
-```
-
-The started members listen on `localhost:12379`, `localhost:22379`, and `localhost:32379` for client requests respectively.
-
-To interact with the started cluster by using etcdctl:
-
-```
-# use API version 3
-$ export ETCDCTL_API=3
-
-$ etcdctl --endpoints=localhost:12379 member list
-+------------------+---------+--------+------------------------+------------------------+
-|        ID        | STATUS  |  NAME  |       PEER ADDRS       |      CLIENT ADDRS      |
-+------------------+---------+--------+------------------------+------------------------+
-| 8211f1d0f64f3269 | started | infra1 | http://127.0.0.1:12380 | http://127.0.0.1:12379 |
-| 91bc3c398fb3c146 | started | infra2 | http://127.0.0.1:22380 | http://127.0.0.1:22379 |
-| fd422379fda50e48 | started | infra3 | http://127.0.0.1:32380 | http://127.0.0.1:32379 |
-+------------------+---------+--------+------------------------+------------------------+
-
-$ etcdctl --endpoints=localhost:12379 put foo bar
-OK
-```
-
-To exercise etcd's fault tolerance, kill a member:
-
-```
-# kill etcd2
-$ goreman run stop etcd2
-
-$ etcdctl --endpoints=localhost:12379 put key hello
-OK
-
-$ etcdctl --endpoints=localhost:12379 get key
-hello
-
-# try to get key from the killed member
-$ etcdctl --endpoints=localhost:22379 get key
-2016/04/18 23:07:35 grpc: Conn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp 127.0.0.1:22379: getsockopt: connection refused"; Reconnecting to "localhost:22379"
-Error:  grpc: timed out trying to connect
-
-# restart the killed member
-$ goreman run restart etcd2
-
-# get the key from restarted member
-$ etcdctl --endpoints=localhost:22379 get key
-hello
-```
-
-To learn more about interacting with etcd, read [interacting with etcd section][interacting].
-
-[interacting]: ./interacting_v3.md
-[clustering]: ./clustering.md
-
diff --git a/Documentation/maintenance.md b/Documentation/maintenance.md
deleted file mode 100644
index 66c1dfa..0000000
--- a/Documentation/maintenance.md
+++ /dev/null
@@ -1,116 +0,0 @@
-# Maintenance
-
-## Overview
-
-An etcd cluster needs periodic maintenance to remain reliable. Depending on an etcd application's needs, this maintenance can usually be automated and performed without downtime or significantly degraded performance.
-
-All etcd maintenance manages storage resources consumed by the etcd keyspace. Failure to adequately control the keyspace size is guarded by storage space quotas; if an etcd member runs low on space, a quota will trigger cluster-wide alarms which will put the system into a limited-operation maintenance mode. To avoid running out of space for writes to the keyspace, the etcd keyspace history must be compacted. Storage space itself may be reclaimed by defragmenting etcd members. Finally, periodic snapshot backups of etcd member state makes it possible to recover any unintended logical data loss or corruption caused by operational error.
-
-## History compaction
-
-Since etcd keeps an exact history of its keyspace, this history should be periodically compacted to avoid performance degradation and eventual storage space exhaustion. Compacting the keyspace history drops all information about keys superseded prior to a given keyspace revision. The space used by these keys then becomes available for additional writes to the keyspace.
-
-The keyspace can be compacted automatically with `etcd`'s time windowed history retention policy, or manually with `etcdctl`. The `etcdctl` method provides fine-grained control over the compacting process whereas automatic compacting fits applications that only need key history for some length of time.
-
-`etcd` can be set to automatically compact the keyspace with the `--experimental-auto-compaction` option with a period of hours:
-
-```sh
-# keep one hour of history
-$ etcd --experimental-auto-compaction-retention=1
-```
-
-An `etcdctl` initiated compaction works as follows:
-
-```sh
-# compact up to revision 3
-$ etcdctl compact 3
-
-```
-
-Revisions prior to the compaction revision become inaccessible:
-
-```sh
-$ etcdctl get --rev=2 somekey
-Error:  rpc error: code = 11 desc = etcdserver: storage: required revision has been compacted
-```
-
-## Defragmentation
-
-After compacting the keyspace, the backend database may exhibit internal fragmentation. Any internal fragmentation is space that is free to use by the backend but still consumes storage space. The process of defragmentation releases this storage space back to the file system. Defragmentation is issued on a per-member so that cluster-wide latency spikes may be avoided.
-
-Compacting old revisions internally fragments `etcd` by leaving gaps in backend database. Fragmented space is available for use by `etcd` but unavailable to the host filesystem.
-
-To defragment an etcd member, use the `etcdctl defrag` command:
-
-```sh
-$ etcdctl defrag
-Finished defragmenting etcd member[127.0.0.1:2379]
-```
-
-## Space quota
-
-The space quota in `etcd` ensures the cluster operates in a reliable fashion. Without a space quota, `etcd` may suffer from poor performance if the keyspace grows excessively large, or it may simply run out of storage space, leading to unpredictable cluster behavior. If the keyspace's backend database for any member exceeds the space quota, `etcd` raises a cluster-wide alarm that puts the cluster into a maintenance mode which only accepts key reads and deletes. After freeing enough space in the keyspace, the alarm can be disarmed and the cluster will resume normal operation.
-
-By default, `etcd` sets a conservative space quota suitable for most applications, but it may be configured on the command line, in bytes:
-
-```sh
-# set a very small 16MB quota
-$ etcd --quota-backend-bytes=16777216
-```
-
-The space quota can be triggered with a loop:
-
-```sh
-# fill keyspace
-$ while [ 1 ]; do dd if=/dev/urandom bs=1024 count=1024  | etcdctl put key  || break; done
-...
-Error:  rpc error: code = 8 desc = etcdserver: storage: database space exceeded
-# confirm quota space is exceeded
-$ etcdctl endpoint status
-+----------------+------------------+-----------+---------+-----------+-----------+------------+
-|    ENDPOINT    |        ID        |  VERSION  | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |
-+----------------+------------------+-----------+---------+-----------+-----------+------------+
-| 127.0.0.1:2379 | bf9071f4639c75cc | 2.3.0+git | 18 MB   | true      |         2 |       3332 |
-+----------------+------------------+-----------+---------+-----------+-----------+------------+
-# confirm alarm is raised
-$ etcdctl alarm list
-memberID:13803658152347727308 alarm:NOSPACE 
-```
-
-Removing excessive keyspace data will put the cluster back within the quota limits so the alarm can be disarmed:
-
-```sh
-# get current revision
-$ etcdctl --endpoints=:2379 endpoint status
-[{"Endpoint":"127.0.0.1:2379","Status":{"header":{"cluster_id":8925027824743593106,"member_id":13803658152347727308,"revision":1516,"raft_term":2},"version":"2.3.0+git","dbSize":17973248,"leader":13803658152347727308,"raftIndex":6359,"raftTerm":2}}]
-# compact away all old revisions
-$ etdctl compact 1516
-compacted revision 1516
-# defragment away excessive space
-$ etcdctl defrag
-Finished defragmenting etcd member[127.0.0.1:2379]
-# disarm alarm
-$ etcdctl alarm disarm
-memberID:13803658152347727308 alarm:NOSPACE 
-# test puts are allowed again
-$ etdctl put newkey 123
-OK
-```
-
-## Snapshot backup
-
-Snapshotting the `etcd` cluster on a regular basis serves as a durable backup for an etcd keyspace. By taking periodic snapshots of an etcd member's backend database, an `etcd` cluster can be recovered to a point in time with a known good state.
-
-A snapshot is taken with `etcdctl`:
-
-```sh
-$ etcdctl snapshot save backup.db
-$ etcdctl snapshot status backup.db
-+----------+----------+------------+------------+
-|   HASH   | REVISION | TOTAL KEYS | TOTAL SIZE |
-+----------+----------+------------+------------+
-| fe01cf57 |       10 |          7 | 2.1 MB     |
-+----------+----------+------------+------------+
-
-```
-
diff --git a/Documentation/op_guide/maintenance.md b/Documentation/op_guide/maintenance.md
new file mode 100644
index 0000000..e416ff0
--- /dev/null
+++ b/Documentation/op_guide/maintenance.md
@@ -0,0 +1,115 @@
+# Maintenance
+
+## Overview
+
+An etcd cluster needs periodic maintenance to remain reliable. Depending on an etcd application's needs, this maintenance can usually be automated and performed without downtime or significantly degraded performance.
+
+All etcd maintenance manages storage resources consumed by the etcd keyspace. Failure to adequately control the keyspace size is guarded by storage space quotas; if an etcd member runs low on space, a quota will trigger cluster-wide alarms which will put the system into a limited-operation maintenance mode. To avoid running out of space for writes to the keyspace, the etcd keyspace history must be compacted. Storage space itself may be reclaimed by defragmenting etcd members. Finally, periodic snapshot backups of etcd member state makes it possible to recover any unintended logical data loss or corruption caused by operational error.
+
+## History compaction
+
+Since etcd keeps an exact history of its keyspace, this history should be periodically compacted to avoid performance degradation and eventual storage space exhaustion. Compacting the keyspace history drops all information about keys superseded prior to a given keyspace revision. The space used by these keys then becomes available for additional writes to the keyspace.
+
+The keyspace can be compacted automatically with `etcd`'s time windowed history retention policy, or manually with `etcdctl`. The `etcdctl` method provides fine-grained control over the compacting process whereas automatic compacting fits applications that only need key history for some length of time.
+
+`etcd` can be set to automatically compact the keyspace with the `--experimental-auto-compaction` option with a period of hours:
+
+```sh
+# keep one hour of history
+$ etcd --experimental-auto-compaction-retention=1
+```
+
+An `etcdctl` initiated compaction works as follows:
+
+```sh
+# compact up to revision 3
+$ etcdctl compact 3
+
+```
+
+Revisions prior to the compaction revision become inaccessible:
+
+```sh
+$ etcdctl get --rev=2 somekey
+Error:  rpc error: code = 11 desc = etcdserver: storage: required revision has been compacted
+```
+
+## Defragmentation
+
+After compacting the keyspace, the backend database may exhibit internal fragmentation. Any internal fragmentation is space that is free to use by the backend but still consumes storage space. The process of defragmentation releases this storage space back to the file system. Defragmentation is issued on a per-member so that cluster-wide latency spikes may be avoided.
+
+Compacting old revisions internally fragments `etcd` by leaving gaps in backend database. Fragmented space is available for use by `etcd` but unavailable to the host filesystem.
+
+To defragment an etcd member, use the `etcdctl defrag` command:
+
+```sh
+$ etcdctl defrag
+Finished defragmenting etcd member[127.0.0.1:2379]
+```
+
+## Space quota
+
+The space quota in `etcd` ensures the cluster operates in a reliable fashion. Without a space quota, `etcd` may suffer from poor performance if the keyspace grows excessively large, or it may simply run out of storage space, leading to unpredictable cluster behavior. If the keyspace's backend database for any member exceeds the space quota, `etcd` raises a cluster-wide alarm that puts the cluster into a maintenance mode which only accepts key reads and deletes. After freeing enough space in the keyspace, the alarm can be disarmed and the cluster will resume normal operation.
+
+By default, `etcd` sets a conservative space quota suitable for most applications, but it may be configured on the command line, in bytes:
+
+```sh
+# set a very small 16MB quota
+$ etcd --quota-backend-bytes=16777216
+```
+
+The space quota can be triggered with a loop:
+
+```sh
+# fill keyspace
+$ while [ 1 ]; do dd if=/dev/urandom bs=1024 count=1024  | etcdctl put key  || break; done
+...
+Error:  rpc error: code = 8 desc = etcdserver: storage: database space exceeded
+# confirm quota space is exceeded
+$ etcdctl endpoint status
++----------------+------------------+-----------+---------+-----------+-----------+------------+
+|    ENDPOINT    |        ID        |  VERSION  | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |
++----------------+------------------+-----------+---------+-----------+-----------+------------+
+| 127.0.0.1:2379 | bf9071f4639c75cc | 2.3.0+git | 18 MB   | true      |         2 |       3332 |
++----------------+------------------+-----------+---------+-----------+-----------+------------+
+# confirm alarm is raised
+$ etcdctl alarm list
+memberID:13803658152347727308 alarm:NOSPACE 
+```
+
+Removing excessive keyspace data will put the cluster back within the quota limits so the alarm can be disarmed:
+
+```sh
+# get current revision
+$ etcdctl --endpoints=:2379 endpoint status
+[{"Endpoint":"127.0.0.1:2379","Status":{"header":{"cluster_id":8925027824743593106,"member_id":13803658152347727308,"revision":1516,"raft_term":2},"version":"2.3.0+git","dbSize":17973248,"leader":13803658152347727308,"raftIndex":6359,"raftTerm":2}}]
+# compact away all old revisions
+$ etdctl compact 1516
+compacted revision 1516
+# defragment away excessive space
+$ etcdctl defrag
+Finished defragmenting etcd member[127.0.0.1:2379]
+# disarm alarm
+$ etcdctl alarm disarm
+memberID:13803658152347727308 alarm:NOSPACE 
+# test puts are allowed again
+$ etdctl put newkey 123
+OK
+```
+
+## Snapshot backup
+
+Snapshotting the `etcd` cluster on a regular basis serves as a durable backup for an etcd keyspace. By taking periodic snapshots of an etcd member's backend database, an `etcd` cluster can be recovered to a point in time with a known good state.
+
+A snapshot is taken with `etcdctl`:
+
+```sh
+$ etcdctl snapshot save backup.db
+$ etcdctl snapshot status backup.db
++----------+----------+------------+------------+
+|   HASH   | REVISION | TOTAL KEYS | TOTAL SIZE |
++----------+----------+------------+------------+
+| fe01cf57 |       10 |          7 | 2.1 MB     |
++----------+----------+------------+------------+
+
+```
diff --git a/scripts/genproto.sh b/scripts/genproto.sh
index 1a588bf..5f56d90 100755
--- a/scripts/genproto.sh
+++ b/scripts/genproto.sh
@@ -65,7 +65,7 @@ done
 # only run when './scripts/genproto.sh -g'
 #
 if [ "$1" = "-g" ]; then
-	echo "protodoc is auto-generating Protocol Buffer documentation..."
+	echo "protodoc is auto-generating grpc API reference documentation..."
 	go get -v -u github.com/coreos/protodoc
 	SHA_PROTODOC="4cd8db83c5595ac514169fda607d1ccb5eef669b"
 	PROTODOC_PATH="${GOPATH}/src/github.com/coreos/protodoc"
@@ -77,11 +77,11 @@ if [ "$1" = "-g" ]; then
 
 	protodoc --directories="etcdserver/etcdserverpb=service_message,storage/storagepb=service_message,lease/leasepb=service_message,auth/authpb=service_message" \
 		--title="etcd API Reference" \
-		--output="Documentation/api_reference_v3.md" \
+		--output="Documentation/dev-guide/api_reference_v3.md" \
 		--message-only-from-this-file="etcdserver/etcdserverpb/rpc.proto"
 
 	echo "protodoc is finished..."
 else
-	echo "skipping Protocol Buffer document auto-generation..."
+	echo "skipping grpc API reference document auto-generation..."
 fi
 
