commit 2ec8572a8cf3133996dd577ad6a388cac5f48bac
Author: Anthony Romano <anthony.romano@coreos.com>
Date:   Thu Feb 23 22:27:10 2017 -0800

    e2e: fix -tags cov builds
    
    Wasn't compiling.

diff --git a/e2e/etcd_spawn_cov.go b/e2e/etcd_spawn_cov.go
new file mode 100644
index 0000000..6a9571f
--- /dev/null
+++ b/e2e/etcd_spawn_cov.go
@@ -0,0 +1,85 @@
+// Copyright 2017 The etcd Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// +build cov
+
+package e2e
+
+import (
+	"fmt"
+	"os"
+	"path/filepath"
+	"strings"
+	"syscall"
+	"time"
+
+	"github.com/coreos/etcd/pkg/expect"
+	"github.com/coreos/etcd/pkg/fileutil"
+	"github.com/coreos/etcd/pkg/flags"
+)
+
+func spawnCmd(args []string) (*expect.ExpectProcess, error) {
+	if args[0] == binPath {
+		coverPath := os.Getenv("COVERDIR")
+		if !filepath.IsAbs(coverPath) {
+			// COVERDIR is relative to etcd root but e2e test has its path set to be relative to the e2e folder.
+			// adding ".." in front of COVERDIR ensures that e2e saves coverage reports to the correct location.
+			coverPath = filepath.Join("..", coverPath)
+		}
+		if !fileutil.Exist(coverPath) {
+			return nil, fmt.Errorf("could not find coverage folder")
+		}
+		covArgs := []string{
+			fmt.Sprintf("-test.coverprofile=e2e.%v.coverprofile", time.Now().UnixNano()),
+			"-test.outputdir=" + coverPath,
+		}
+		ep, err := expect.NewExpectWithEnv(binDir+"/etcd_test", covArgs, args2env(args[1:]))
+		if err != nil {
+			return nil, err
+		}
+		// ep sends SIGTERM to etcd_test process on ep.close()
+		// allowing the process to exit gracefully in order to generate a coverage report.
+		// note: go runtime ignores SIGINT but not SIGTERM
+		// if e2e test is run as a background process.
+		ep.StopSignal = syscall.SIGTERM
+		return ep, nil
+	}
+	return expect.NewExpect(args[0], args[1:]...)
+}
+
+func args2env(args []string) []string {
+	var covEnvs []string
+	for i := range args[1:] {
+		if !strings.HasPrefix(args[i], "--") {
+			continue
+		}
+		flag := strings.Split(args[i], "--")[1]
+		val := "true"
+		// split the flag that has "="
+		// e.g --auto-tls=true" => flag=auto-tls and val=true
+		if strings.Contains(args[i], "=") {
+			split := strings.Split(flag, "=")
+			flag = split[0]
+			val = split[1]
+		}
+
+		if i+1 < len(args) {
+			if !strings.HasPrefix(args[i+1], "--") {
+				val = args[i+1]
+			}
+		}
+		covEnvs = append(covEnvs, flags.FlagToEnv("ETCD", flag)+"="+val)
+	}
+	return covEnvs
+}
diff --git a/e2e/etcd_spawn_cov.go.go b/e2e/etcd_spawn_cov.go.go
deleted file mode 100644
index d7b8f8c..0000000
--- a/e2e/etcd_spawn_cov.go.go
+++ /dev/null
@@ -1,82 +0,0 @@
-// Copyright 2017 The etcd Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// +build cov
-
-package e2e
-
-import (
-	"fmt"
-	"os"
-	"path/filepath"
-	"strings"
-	"syscall"
-	"time"
-
-	"github.com/coreos/etcd/pkg/expect"
-	"github.com/coreos/etcd/pkg/fileutil"
-	"github.com/coreos/etcd/pkg/flags"
-)
-
-func spawnCmd(args []string) (*expect.ExpectProcess, error) {
-	if args[0] == binPath {
-		coverPath := os.Getenv("COVERDIR")
-		if !filepath.IsAbs(coverPath) {
-			// COVERDIR is relative to etcd root but e2e test has its path set to be relative to the e2e folder.
-			// adding ".." in front of COVERDIR ensures that e2e saves coverage reports to the correct location.
-			coverPath = filepath.Join("..", coverPath)
-		}
-		if !fileutil.Exist(coverPath) {
-			return nil, fmt.Errorf("could not find coverage folder")
-		}
-		covArgs := []string{
-			fmt.Sprintf("-test.coverprofile=e2e.%v.coverprofile", time.Now().UnixNano()),
-			"-test.outputdir=" + coverPath,
-		}
-		ep := expect.NewExpectWithEnv(binDir+"/etcd_test", covArgs, args2env(args[1:]))
-		// ep sends SIGTERM to etcd_test process on ep.close()
-		// allowing the process to exit gracefully in order to generate a coverage report.
-		// note: go runtime ignores SIGINT but not SIGTERM
-		// if e2e test is run as a background process.
-		ep.StopSignal = syscall.SIGTERM
-		return nil, ep
-	}
-	return expect.NewExpect(args[0], args[1:]...)
-}
-
-func args2env(args []string) []string {
-	var covEnvs []string
-	for i := range args[1:] {
-		if !strings.HasPrefix(args[i], "--") {
-			continue
-		}
-		flag := strings.Split(args[i], "--")[1]
-		val := "true"
-		// split the flag that has "="
-		// e.g --auto-tls=true" => flag=auto-tls and val=true
-		if strings.Contains(args[i], "=") {
-			split := strings.Split(flag, "=")
-			flag = split[0]
-			val = split[1]
-		}
-
-		if i+1 < len(args) {
-			if !strings.HasPrefix(args[i+1], "--") {
-				val = args[i+1]
-			}
-		}
-		covEnvs = append(covEnvs, flags.FlagToEnv("ETCD", flag)+"="+val)
-	}
-	return covEnvs
-}
