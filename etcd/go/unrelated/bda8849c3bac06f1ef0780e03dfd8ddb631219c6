commit bda8849c3bac06f1ef0780e03dfd8ddb631219c6
Author: Yicheng Qin <qycqycqycqycqyc@gmail.com>
Date:   Wed Apr 9 15:06:17 2014 -0700

    chore(btrfs): rename fs to btrfs
    
    This is because the actions is specific for btrfs.

diff --git a/etcd/etcd.go b/etcd/etcd.go
index 3a9d802..4580044 100644
--- a/etcd/etcd.go
+++ b/etcd/etcd.go
@@ -33,7 +33,7 @@ import (
 	ehttp "github.com/coreos/etcd/http"
 	"github.com/coreos/etcd/log"
 	"github.com/coreos/etcd/metrics"
-	"github.com/coreos/etcd/pkg/fs"
+	"github.com/coreos/etcd/pkg/btrfs"
 	"github.com/coreos/etcd/server"
 	"github.com/coreos/etcd/store"
 )
@@ -104,8 +104,8 @@ func (e *Etcd) Run() {
 	}
 
 	// Set NOCOW for data directory in btrfs
-	if fs.IsBtrfs(e.Config.DataDir) {
-		fs.SetNOCOWDir(e.Config.DataDir)
+	if btrfs.IsBtrfs(e.Config.DataDir) {
+		btrfs.SetNOCOWDir(e.Config.DataDir)
 	}
 
 	var mbName string
diff --git a/pkg/btrfs/.util_linux.go.swp b/pkg/btrfs/.util_linux.go.swp
new file mode 100644
index 0000000..36326a0
Binary files /dev/null and b/pkg/btrfs/.util_linux.go.swp differ
diff --git a/pkg/btrfs/fs.go b/pkg/btrfs/fs.go
new file mode 100644
index 0000000..990ae58
--- /dev/null
+++ b/pkg/btrfs/fs.go
@@ -0,0 +1,73 @@
+package btrfs
+
+import (
+	"os"
+	"runtime"
+	"syscall"
+	"unsafe"
+
+	"github.com/coreos/etcd/log"
+)
+
+const (
+	// from Linux/include/uapi/linux/magic.h
+	BTRFS_SUPER_MAGIC = 0x9123683E
+
+	// from Linux/include/uapi/linux/fs.h
+	FS_NOCOW_FL = 0x00800000
+	FS_IOC_GETFLAGS = 0x80086601
+	FS_IOC_SETFLAGS = 0x40086602
+)
+
+// IsBtrfs checks whether the file is in btrfs
+func IsBtrfs(path string) bool {
+	// btrfs is linux-only filesystem
+	// exit on other platforms
+	if runtime.GOOS != "linux" {
+		return false
+	}
+	var buf syscall.Statfs_t
+	if err := syscall.Statfs(path, &buf); err != nil {
+		log.Warnf("Failed to statfs: %v", err)
+		return false
+	}
+	log.Debugf("The type of path %v is %v", path, buf.Type)
+	if buf.Type != BTRFS_SUPER_MAGIC {
+		return false
+	}
+	log.Infof("The path %v is in btrfs", path)
+	return true
+}
+
+// SetNOCOWDir sets NOCOW flag for the directory
+func SetNOCOWDir(path string) error {
+	file, err := os.Open(path)
+	if err != nil {
+		log.Warnf("Failed to open %v: %v", path, err)
+		return err
+	}
+	defer file.Close()
+
+	fileinfo, err := file.Stat()
+	if err != nil {
+		log.Warnf("Failed to stat %v: %v", path, err)
+		return err
+	}
+	if !fileinfo.IsDir() {
+		log.Infof("Skip NOCOW setting for non directory")
+		return nil
+	}
+
+	var attr int
+	if _, _, errno := syscall.Syscall(syscall.SYS_IOCTL, file.Fd(), FS_IOC_GETFLAGS, uintptr(unsafe.Pointer(&attr))); errno != 0 {
+		log.Warnf("Failed to get file flags: %v", errno.Error())
+		return errno
+	}
+	attr |= FS_NOCOW_FL
+	if _, _, errno := syscall.Syscall(syscall.SYS_IOCTL, file.Fd(), FS_IOC_SETFLAGS, uintptr(unsafe.Pointer(&attr))); errno != 0 {
+		log.Warnf("Failed to set file flags: %v", errno.Error())
+		return errno
+	}
+	log.Infof("Set NOCOW to path %v succeeded", path)
+	return nil
+}
diff --git a/pkg/btrfs/fs_test.go b/pkg/btrfs/fs_test.go
new file mode 100644
index 0000000..30cd25e
--- /dev/null
+++ b/pkg/btrfs/fs_test.go
@@ -0,0 +1,29 @@
+package btrfs
+
+import (
+	"io/ioutil"
+	"os"
+	"os/exec"
+	"strings"
+	"testing"
+)
+
+func TestSetNOCOW(t *testing.T) {
+	name, err := ioutil.TempDir(".", "etcdtest")
+	if err != nil {
+		t.Fatal("Failed creating temp dir")
+	}
+	defer os.Remove(name)
+
+	if IsBtrfs(name) {
+		SetNOCOWDir(name)
+		cmd := exec.Command("lsattr", name)
+		out, err := cmd.Output()
+		if err != nil {
+			t.Fatal("Failed executing lsattr")
+		}
+		if !strings.Contains(string(out), "---------------C") {
+			t.Fatal("Failed setting NOCOW:\n", string(out))
+		}
+	}
+}
diff --git a/pkg/fs/.util_linux.go.swp b/pkg/fs/.util_linux.go.swp
deleted file mode 100644
index 36326a0..0000000
Binary files a/pkg/fs/.util_linux.go.swp and /dev/null differ
diff --git a/pkg/fs/fs.go b/pkg/fs/fs.go
deleted file mode 100644
index fb90e60..0000000
--- a/pkg/fs/fs.go
+++ /dev/null
@@ -1,73 +0,0 @@
-package fs
-
-import (
-	"os"
-	"runtime"
-	"syscall"
-	"unsafe"
-
-	"github.com/coreos/etcd/log"
-)
-
-const (
-	// from Linux/include/uapi/linux/magic.h
-	BTRFS_SUPER_MAGIC = 0x9123683E
-
-	// from Linux/include/uapi/linux/fs.h
-	FS_NOCOW_FL = 0x00800000
-	FS_IOC_GETFLAGS = 0x80086601
-	FS_IOC_SETFLAGS = 0x40086602
-)
-
-// IsBtrfs checks whether the file is in btrfs
-func IsBtrfs(path string) bool {
-	// btrfs is linux-only filesystem
-	// exit on other platforms
-	if runtime.GOOS != "linux" {
-		return false
-	}
-	var buf syscall.Statfs_t
-	if err := syscall.Statfs(path, &buf); err != nil {
-		log.Warnf("Failed to statfs: %v", err)
-		return false
-	}
-	log.Debugf("The type of path %v is %v", path, buf.Type)
-	if buf.Type != BTRFS_SUPER_MAGIC {
-		return false
-	}
-	log.Infof("The path %v is in btrfs", path)
-	return true
-}
-
-// SetNOCOWDir sets NOCOW flag for the directory
-func SetNOCOWDir(path string) error {
-	file, err := os.Open(path)
-	if err != nil {
-		log.Warnf("Failed to open %v: %v", path, err)
-		return err
-	}
-	defer file.Close()
-
-	fileinfo, err := file.Stat()
-	if err != nil {
-		log.Warnf("Failed to stat %v: %v", path, err)
-		return err
-	}
-	if !fileinfo.IsDir() {
-		log.Infof("Skip NOCOW setting for non directory")
-		return nil
-	}
-
-	var attr int
-	if _, _, errno := syscall.Syscall(syscall.SYS_IOCTL, file.Fd(), FS_IOC_GETFLAGS, uintptr(unsafe.Pointer(&attr))); errno != 0 {
-		log.Warnf("Failed to get file flags: %v", errno.Error())
-		return errno
-	}
-	attr |= FS_NOCOW_FL
-	if _, _, errno := syscall.Syscall(syscall.SYS_IOCTL, file.Fd(), FS_IOC_SETFLAGS, uintptr(unsafe.Pointer(&attr))); errno != 0 {
-		log.Warnf("Failed to set file flags: %v", errno.Error())
-		return errno
-	}
-	log.Infof("Set NOCOW to path %v succeeded", path)
-	return nil
-}
diff --git a/pkg/fs/fs_test.go b/pkg/fs/fs_test.go
deleted file mode 100644
index 82a5e16..0000000
--- a/pkg/fs/fs_test.go
+++ /dev/null
@@ -1,29 +0,0 @@
-package fs
-
-import (
-	"io/ioutil"
-	"os"
-	"os/exec"
-	"strings"
-	"testing"
-)
-
-func TestSetNOCOW(t *testing.T) {
-	name, err := ioutil.TempDir(".", "etcdtest")
-	if err != nil {
-		t.Fatal("Failed creating temp dir")
-	}
-	defer os.Remove(name)
-
-	if IsBtrfs(name) {
-		SetNOCOWDir(name)
-		cmd := exec.Command("lsattr", name)
-		out, err := cmd.Output()
-		if err != nil {
-			t.Fatal("Failed executing lsattr")
-		}
-		if !strings.Contains(string(out), "---------------C") {
-			t.Fatal("Failed setting NOCOW:\n", string(out))
-		}
-	}
-}
diff --git a/test.sh b/test.sh
index cf2a2e8..d809e63 100755
--- a/test.sh
+++ b/test.sh
@@ -23,8 +23,8 @@ go test -v ./server/v2/tests
 go test -i ./mod/lock/v2/tests
 go test -v ./mod/lock/v2/tests
 
-go test -i ./pkg/fs
-go test -v ./pkg/fs
+go test -i ./pkg/btrfs
+go test -v ./pkg/btrfs
 
 go test -i ./tests/functional
 ETCD_BIN_PATH=$(pwd)/bin/etcd go test -v ./tests/functional
