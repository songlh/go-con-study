commit 9f569842f0f666c85f81838b99ea415336c81b81
Author: Anthony Romano <anthony.romano@coreos.com>
Date:   Tue Feb 23 17:45:43 2016 -0800

    clientv3: move syncer to mirror package
    
    to be in line with sync meaning process synchronization, not data
    synchronization

diff --git a/clientv3/mirror/syncer.go b/clientv3/mirror/syncer.go
new file mode 100644
index 0000000..f9faaed
--- /dev/null
+++ b/clientv3/mirror/syncer.go
@@ -0,0 +1,126 @@
+// Copyright 2016 CoreOS, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package mirror
+
+import (
+	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
+	"github.com/coreos/etcd/clientv3"
+)
+
+const (
+	batchLimit = 1000
+)
+
+// Syncer syncs with the key-value state of an etcd cluster.
+type Syncer interface {
+	// SyncBase syncs the base state of the key-value state.
+	// The key-value state are sent through the returned chan.
+	SyncBase(ctx context.Context) (<-chan clientv3.GetResponse, chan error)
+	// SyncUpdates syncs the updates of the key-value state.
+	// The update events are sent through the returned chan.
+	SyncUpdates(ctx context.Context) clientv3.WatchChan
+}
+
+// NewSyncer creates a Syncer.
+func NewSyncer(c *clientv3.Client, prefix string, rev int64) Syncer {
+	return &syncer{c: c, prefix: prefix, rev: rev}
+}
+
+type syncer struct {
+	c      *clientv3.Client
+	rev    int64
+	prefix string
+}
+
+func (s *syncer) SyncBase(ctx context.Context) (<-chan clientv3.GetResponse, chan error) {
+	respchan := make(chan clientv3.GetResponse, 1024)
+	errchan := make(chan error, 1)
+
+	kapi := clientv3.NewKV(s.c)
+	// if rev is not specified, we will choose the most recent revision.
+	if s.rev == 0 {
+		resp, err := kapi.Get(ctx, "foo")
+		if err != nil {
+			errchan <- err
+			close(respchan)
+			close(errchan)
+			return respchan, errchan
+		}
+		s.rev = resp.Header.Revision
+	}
+
+	go func() {
+		defer close(respchan)
+		defer close(errchan)
+
+		var key string
+
+		opts := []clientv3.OpOption{clientv3.WithLimit(batchLimit), clientv3.WithRev(s.rev)}
+
+		if len(s.prefix) == 0 {
+			// If len(s.prefix) == 0, we will sync the entire key-value space.
+			// We then range from the smallest key (0x00) to the end.
+			opts = append(opts, clientv3.WithFromKey())
+			key = "\x00"
+		} else {
+			// If len(s.prefix) != 0, we will sync key-value space with given prefix.
+			// We then range from the prefix to the next prefix if exists. Or we will
+			// range from the prefix to the end if the next prefix does not exists.
+			opts = append(opts, clientv3.WithPrefix())
+			key = s.prefix
+		}
+
+		for {
+			resp, err := kapi.Get(ctx, key, opts...)
+			if err != nil {
+				errchan <- err
+				return
+			}
+
+			respchan <- (clientv3.GetResponse)(*resp)
+
+			if !resp.More {
+				return
+			}
+			// move to next key
+			key = string(append(resp.Kvs[len(resp.Kvs)-1].Key, 0))
+		}
+	}()
+
+	return respchan, errchan
+}
+
+func (s *syncer) SyncUpdates(ctx context.Context) clientv3.WatchChan {
+	if s.rev == 0 {
+		panic("unexpected revision = 0. Calling SyncUpdates before SyncBase finishes?")
+	}
+
+	respchan := make(chan clientv3.WatchResponse, 1024)
+
+	go func() {
+		wapi := clientv3.NewWatcher(s.c)
+		defer wapi.Close()
+		defer close(respchan)
+
+		// get all events since revision (or get non-compacted revision, if
+		// rev is too far behind)
+		wch := wapi.Watch(ctx, s.prefix, clientv3.WithPrefix(), clientv3.WithRev(s.rev))
+		for wr := range wch {
+			respchan <- wr
+		}
+	}()
+
+	return respchan
+}
diff --git a/clientv3/sync/syncer.go b/clientv3/sync/syncer.go
deleted file mode 100644
index 06c4007..0000000
--- a/clientv3/sync/syncer.go
+++ /dev/null
@@ -1,126 +0,0 @@
-// Copyright 2016 CoreOS, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package sync
-
-import (
-	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
-	"github.com/coreos/etcd/clientv3"
-)
-
-const (
-	batchLimit = 1000
-)
-
-// Syncer syncs with the key-value state of an etcd cluster.
-type Syncer interface {
-	// SyncBase syncs the base state of the key-value state.
-	// The key-value state are sent through the returned chan.
-	SyncBase(ctx context.Context) (<-chan clientv3.GetResponse, chan error)
-	// SyncUpdates syncs the updates of the key-value state.
-	// The update events are sent through the returned chan.
-	SyncUpdates(ctx context.Context) clientv3.WatchChan
-}
-
-// NewSyncer creates a Syncer.
-func NewSyncer(c *clientv3.Client, prefix string, rev int64) Syncer {
-	return &syncer{c: c, prefix: prefix, rev: rev}
-}
-
-type syncer struct {
-	c      *clientv3.Client
-	rev    int64
-	prefix string
-}
-
-func (s *syncer) SyncBase(ctx context.Context) (<-chan clientv3.GetResponse, chan error) {
-	respchan := make(chan clientv3.GetResponse, 1024)
-	errchan := make(chan error, 1)
-
-	kapi := clientv3.NewKV(s.c)
-	// if rev is not specified, we will choose the most recent revision.
-	if s.rev == 0 {
-		resp, err := kapi.Get(ctx, "foo")
-		if err != nil {
-			errchan <- err
-			close(respchan)
-			close(errchan)
-			return respchan, errchan
-		}
-		s.rev = resp.Header.Revision
-	}
-
-	go func() {
-		defer close(respchan)
-		defer close(errchan)
-
-		var key string
-
-		opts := []clientv3.OpOption{clientv3.WithLimit(batchLimit), clientv3.WithRev(s.rev)}
-
-		if len(s.prefix) == 0 {
-			// If len(s.prefix) == 0, we will sync the entire key-value space.
-			// We then range from the smallest key (0x00) to the end.
-			opts = append(opts, clientv3.WithFromKey())
-			key = "\x00"
-		} else {
-			// If len(s.prefix) != 0, we will sync key-value space with given prefix.
-			// We then range from the prefix to the next prefix if exists. Or we will
-			// range from the prefix to the end if the next prefix does not exists.
-			opts = append(opts, clientv3.WithPrefix())
-			key = s.prefix
-		}
-
-		for {
-			resp, err := kapi.Get(ctx, key, opts...)
-			if err != nil {
-				errchan <- err
-				return
-			}
-
-			respchan <- (clientv3.GetResponse)(*resp)
-
-			if !resp.More {
-				return
-			}
-			// move to next key
-			key = string(append(resp.Kvs[len(resp.Kvs)-1].Key, 0))
-		}
-	}()
-
-	return respchan, errchan
-}
-
-func (s *syncer) SyncUpdates(ctx context.Context) clientv3.WatchChan {
-	if s.rev == 0 {
-		panic("unexpected revision = 0. Calling SyncUpdates before SyncBase finishes?")
-	}
-
-	respchan := make(chan clientv3.WatchResponse, 1024)
-
-	go func() {
-		wapi := clientv3.NewWatcher(s.c)
-		defer wapi.Close()
-		defer close(respchan)
-
-		// get all events since revision (or get non-compacted revision, if
-		// rev is too far behind)
-		wch := wapi.Watch(ctx, s.prefix, clientv3.WithPrefix(), clientv3.WithRev(s.rev))
-		for wr := range wch {
-			respchan <- wr
-		}
-	}()
-
-	return respchan
-}
diff --git a/etcdctlv3/command/make_mirror_command.go b/etcdctlv3/command/make_mirror_command.go
index 5329468..abef26e 100644
--- a/etcdctlv3/command/make_mirror_command.go
+++ b/etcdctlv3/command/make_mirror_command.go
@@ -23,7 +23,7 @@ import (
 	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/spf13/cobra"
 	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
 	"github.com/coreos/etcd/clientv3"
-	"github.com/coreos/etcd/clientv3/sync"
+	"github.com/coreos/etcd/clientv3/mirror"
 	"github.com/coreos/etcd/etcdserver/api/v3rpc"
 	"github.com/coreos/etcd/storage/storagepb"
 )
@@ -77,7 +77,7 @@ func makeMirror(ctx context.Context, c *clientv3.Client, dc *clientv3.Client) er
 	// TODO: remove the prefix of the destination cluster?
 	dkv := clientv3.NewKV(dc)
 
-	s := sync.NewSyncer(c, mmprefix, 0)
+	s := mirror.NewSyncer(c, mmprefix, 0)
 
 	rc, errc := s.SyncBase(ctx)
 
diff --git a/etcdctlv3/command/snapshot_command.go b/etcdctlv3/command/snapshot_command.go
index 3746630..0dcc868 100644
--- a/etcdctlv3/command/snapshot_command.go
+++ b/etcdctlv3/command/snapshot_command.go
@@ -22,7 +22,7 @@ import (
 	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/spf13/cobra"
 	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
 	"github.com/coreos/etcd/clientv3"
-	"github.com/coreos/etcd/clientv3/sync"
+	"github.com/coreos/etcd/clientv3/mirror"
 	"github.com/coreos/etcd/etcdserver/api/v3rpc"
 )
 
@@ -90,7 +90,7 @@ func snapshotToFile(c *clientv3.Client, path string) {
 // snapshot reads all of a watcher; returns compaction revision if incomplete
 // TODO: stabilize snapshot format
 func snapshot(w io.Writer, c *clientv3.Client, rev int64) int64 {
-	s := sync.NewSyncer(c, "", rev)
+	s := mirror.NewSyncer(c, "", rev)
 
 	rc, errc := s.SyncBase(context.TODO())
 
