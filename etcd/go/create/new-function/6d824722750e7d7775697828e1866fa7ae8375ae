commit 6d824722750e7d7775697828e1866fa7ae8375ae
Author: Brian Waldon <brian@waldon.cc>
Date:   Wed Jan 28 11:44:38 2015 -0800

    client: move http.go into client.go

diff --git a/client/client.go b/client/client.go
index c420039..59826b0 100644
--- a/client/client.go
+++ b/client/client.go
@@ -16,6 +16,11 @@ package client
 
 import (
 	"errors"
+	"fmt"
+	"io/ioutil"
+	"net/http"
+	"net/url"
+	"sync"
 	"time"
 
 	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
@@ -35,3 +40,234 @@ var (
 	DefaultRequestTimeout = 5 * time.Second
 	DefaultMaxRedirects   = 10
 )
+
+type Config struct {
+	Endpoints []string
+	Transport CancelableTransport
+}
+
+// CancelableTransport mimics http.Transport to provide an interface which can be
+// substituted for testing (since the RoundTripper interface alone does not
+// require the CancelRequest method)
+type CancelableTransport interface {
+	http.RoundTripper
+	CancelRequest(req *http.Request)
+}
+
+type Client interface {
+	Sync(context.Context) error
+	Endpoints() []string
+
+	httpClient
+}
+
+func New(cfg Config) (Client, error) {
+	c := &httpClusterClient{clientFactory: newHTTPClientFactory(cfg.Transport)}
+	if err := c.reset(cfg.Endpoints); err != nil {
+		return nil, err
+	}
+	return c, nil
+}
+
+type httpClient interface {
+	Do(context.Context, httpAction) (*http.Response, []byte, error)
+}
+
+func newHTTPClientFactory(tr CancelableTransport) httpClientFactory {
+	return func(ep url.URL) httpClient {
+		return &redirectFollowingHTTPClient{
+			max: DefaultMaxRedirects,
+			client: &simpleHTTPClient{
+				transport: tr,
+				endpoint:  ep,
+			},
+		}
+	}
+}
+
+type httpClientFactory func(url.URL) httpClient
+
+type httpAction interface {
+	HTTPRequest(url.URL) *http.Request
+}
+
+type httpClusterClient struct {
+	clientFactory httpClientFactory
+	endpoints     []url.URL
+	sync.RWMutex
+}
+
+func (c *httpClusterClient) reset(eps []string) error {
+	if len(eps) == 0 {
+		return ErrNoEndpoints
+	}
+
+	neps := make([]url.URL, len(eps))
+	for i, ep := range eps {
+		u, err := url.Parse(ep)
+		if err != nil {
+			return err
+		}
+		neps[i] = *u
+	}
+
+	c.endpoints = neps
+
+	return nil
+}
+
+func (c *httpClusterClient) Do(ctx context.Context, act httpAction) (resp *http.Response, body []byte, err error) {
+	c.RLock()
+	leps := len(c.endpoints)
+	eps := make([]url.URL, leps)
+	n := copy(eps, c.endpoints)
+	c.RUnlock()
+
+	if leps == 0 {
+		err = ErrNoEndpoints
+		return
+	}
+
+	if leps != n {
+		err = errors.New("unable to pick endpoint: copy failed")
+		return
+	}
+
+	for _, ep := range eps {
+		hc := c.clientFactory(ep)
+		resp, body, err = hc.Do(ctx, act)
+		if err != nil {
+			if err == ErrTimeout || err == ErrCanceled {
+				return nil, nil, err
+			}
+			continue
+		}
+		if resp.StatusCode/100 == 5 {
+			continue
+		}
+		break
+	}
+
+	return
+}
+
+func (c *httpClusterClient) Endpoints() []string {
+	c.RLock()
+	defer c.RUnlock()
+
+	eps := make([]string, len(c.endpoints))
+	for i, ep := range c.endpoints {
+		eps[i] = ep.String()
+	}
+
+	return eps
+}
+
+func (c *httpClusterClient) Sync(ctx context.Context) error {
+	c.Lock()
+	defer c.Unlock()
+
+	mAPI := NewMembersAPI(c)
+	ms, err := mAPI.List(ctx)
+	if err != nil {
+		return err
+	}
+
+	eps := make([]string, 0)
+	for _, m := range ms {
+		eps = append(eps, m.ClientURLs...)
+	}
+
+	return c.reset(eps)
+}
+
+type roundTripResponse struct {
+	resp *http.Response
+	err  error
+}
+
+type simpleHTTPClient struct {
+	transport CancelableTransport
+	endpoint  url.URL
+}
+
+func (c *simpleHTTPClient) Do(ctx context.Context, act httpAction) (*http.Response, []byte, error) {
+	req := act.HTTPRequest(c.endpoint)
+
+	rtchan := make(chan roundTripResponse, 1)
+	go func() {
+		resp, err := c.transport.RoundTrip(req)
+		rtchan <- roundTripResponse{resp: resp, err: err}
+		close(rtchan)
+	}()
+
+	var resp *http.Response
+	var err error
+
+	select {
+	case rtresp := <-rtchan:
+		resp, err = rtresp.resp, rtresp.err
+	case <-ctx.Done():
+		c.transport.CancelRequest(req)
+		// wait for request to actually exit before continuing
+		<-rtchan
+		err = ctx.Err()
+	}
+
+	// always check for resp nil-ness to deal with possible
+	// race conditions between channels above
+	defer func() {
+		if resp != nil {
+			resp.Body.Close()
+		}
+	}()
+
+	if err != nil {
+		return nil, nil, err
+	}
+
+	body, err := ioutil.ReadAll(resp.Body)
+	return resp, body, err
+}
+
+type redirectFollowingHTTPClient struct {
+	client httpClient
+	max    int
+}
+
+func (r *redirectFollowingHTTPClient) Do(ctx context.Context, act httpAction) (*http.Response, []byte, error) {
+	for i := 0; i <= r.max; i++ {
+		resp, body, err := r.client.Do(ctx, act)
+		if err != nil {
+			return nil, nil, err
+		}
+		if resp.StatusCode/100 == 3 {
+			hdr := resp.Header.Get("Location")
+			if hdr == "" {
+				return nil, nil, fmt.Errorf("Location header not set")
+			}
+			loc, err := url.Parse(hdr)
+			if err != nil {
+				return nil, nil, fmt.Errorf("Location header not valid URL: %s", hdr)
+			}
+			act = &redirectedHTTPAction{
+				action:   act,
+				location: *loc,
+			}
+			continue
+		}
+		return resp, body, nil
+	}
+	return nil, nil, ErrTooManyRedirects
+}
+
+type redirectedHTTPAction struct {
+	action   httpAction
+	location url.URL
+}
+
+func (r *redirectedHTTPAction) HTTPRequest(ep url.URL) *http.Request {
+	orig := r.action.HTTPRequest(ep)
+	orig.URL = &r.location
+	return orig
+}
diff --git a/client/client_test.go b/client/client_test.go
new file mode 100644
index 0000000..ab6be99
--- /dev/null
+++ b/client/client_test.go
@@ -0,0 +1,512 @@
+// Copyright 2015 CoreOS, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package client
+
+import (
+	"errors"
+	"io/ioutil"
+	"net/http"
+	"net/url"
+	"reflect"
+	"strings"
+	"testing"
+	"time"
+
+	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
+)
+
+type staticHTTPClient struct {
+	resp http.Response
+	err  error
+}
+
+func (s *staticHTTPClient) Do(context.Context, httpAction) (*http.Response, []byte, error) {
+	return &s.resp, nil, s.err
+}
+
+type staticHTTPAction struct {
+	request http.Request
+}
+
+type staticHTTPResponse struct {
+	resp http.Response
+	err  error
+}
+
+func (s *staticHTTPAction) HTTPRequest(url.URL) *http.Request {
+	return &s.request
+}
+
+type multiStaticHTTPClient struct {
+	responses []staticHTTPResponse
+	cur       int
+}
+
+func (s *multiStaticHTTPClient) Do(context.Context, httpAction) (*http.Response, []byte, error) {
+	r := s.responses[s.cur]
+	s.cur++
+	return &r.resp, nil, r.err
+}
+
+func newStaticHTTPClientFactory(responses []staticHTTPResponse) httpClientFactory {
+	var cur int
+	return func(url.URL) httpClient {
+		r := responses[cur]
+		cur++
+		return &staticHTTPClient{resp: r.resp, err: r.err}
+	}
+}
+
+type fakeTransport struct {
+	respchan     chan *http.Response
+	errchan      chan error
+	startCancel  chan struct{}
+	finishCancel chan struct{}
+}
+
+func newFakeTransport() *fakeTransport {
+	return &fakeTransport{
+		respchan:     make(chan *http.Response, 1),
+		errchan:      make(chan error, 1),
+		startCancel:  make(chan struct{}, 1),
+		finishCancel: make(chan struct{}, 1),
+	}
+}
+
+func (t *fakeTransport) RoundTrip(*http.Request) (*http.Response, error) {
+	select {
+	case resp := <-t.respchan:
+		return resp, nil
+	case err := <-t.errchan:
+		return nil, err
+	case <-t.startCancel:
+		// wait on finishCancel to simulate taking some amount of
+		// time while calling CancelRequest
+		<-t.finishCancel
+		return nil, errors.New("cancelled")
+	}
+}
+
+func (t *fakeTransport) CancelRequest(*http.Request) {
+	t.startCancel <- struct{}{}
+}
+
+type fakeAction struct{}
+
+func (a *fakeAction) HTTPRequest(url.URL) *http.Request {
+	return &http.Request{}
+}
+
+func TestSimpleHTTPClientDoSuccess(t *testing.T) {
+	tr := newFakeTransport()
+	c := &simpleHTTPClient{transport: tr}
+
+	tr.respchan <- &http.Response{
+		StatusCode: http.StatusTeapot,
+		Body:       ioutil.NopCloser(strings.NewReader("foo")),
+	}
+
+	resp, body, err := c.Do(context.Background(), &fakeAction{})
+	if err != nil {
+		t.Fatalf("incorrect error value: want=nil got=%v", err)
+	}
+
+	wantCode := http.StatusTeapot
+	if wantCode != resp.StatusCode {
+		t.Fatalf("invalid response code: want=%d got=%d", wantCode, resp.StatusCode)
+	}
+
+	wantBody := []byte("foo")
+	if !reflect.DeepEqual(wantBody, body) {
+		t.Fatalf("invalid response body: want=%q got=%q", wantBody, body)
+	}
+}
+
+func TestSimpleHTTPClientDoError(t *testing.T) {
+	tr := newFakeTransport()
+	c := &simpleHTTPClient{transport: tr}
+
+	tr.errchan <- errors.New("fixture")
+
+	_, _, err := c.Do(context.Background(), &fakeAction{})
+	if err == nil {
+		t.Fatalf("expected non-nil error, got nil")
+	}
+}
+
+func TestSimpleHTTPClientDoCancelContext(t *testing.T) {
+	tr := newFakeTransport()
+	c := &simpleHTTPClient{transport: tr}
+
+	tr.startCancel <- struct{}{}
+	tr.finishCancel <- struct{}{}
+
+	_, _, err := c.Do(context.Background(), &fakeAction{})
+	if err == nil {
+		t.Fatalf("expected non-nil error, got nil")
+	}
+}
+
+func TestSimpleHTTPClientDoCancelContextWaitForRoundTrip(t *testing.T) {
+	tr := newFakeTransport()
+	c := &simpleHTTPClient{transport: tr}
+
+	donechan := make(chan struct{})
+	ctx, cancel := context.WithCancel(context.Background())
+	go func() {
+		c.Do(ctx, &fakeAction{})
+		close(donechan)
+	}()
+
+	// This should call CancelRequest and begin the cancellation process
+	cancel()
+
+	select {
+	case <-donechan:
+		t.Fatalf("simpleHTTPClient.Do should not have exited yet")
+	default:
+	}
+
+	tr.finishCancel <- struct{}{}
+
+	select {
+	case <-donechan:
+		//expected behavior
+		return
+	case <-time.After(time.Second):
+		t.Fatalf("simpleHTTPClient.Do did not exit within 1s")
+	}
+}
+
+func TestHTTPClusterClientDo(t *testing.T) {
+	fakeErr := errors.New("fake!")
+	fakeURL := url.URL{}
+	tests := []struct {
+		client   *httpClusterClient
+		wantCode int
+		wantErr  error
+	}{
+		// first good response short-circuits Do
+		{
+			client: &httpClusterClient{
+				endpoints: []url.URL{fakeURL, fakeURL},
+				clientFactory: newStaticHTTPClientFactory(
+					[]staticHTTPResponse{
+						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
+						staticHTTPResponse{err: fakeErr},
+					},
+				),
+			},
+			wantCode: http.StatusTeapot,
+		},
+
+		// fall through to good endpoint if err is arbitrary
+		{
+			client: &httpClusterClient{
+				endpoints: []url.URL{fakeURL, fakeURL},
+				clientFactory: newStaticHTTPClientFactory(
+					[]staticHTTPResponse{
+						staticHTTPResponse{err: fakeErr},
+						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
+					},
+				),
+			},
+			wantCode: http.StatusTeapot,
+		},
+
+		// ErrTimeout short-circuits Do
+		{
+			client: &httpClusterClient{
+				endpoints: []url.URL{fakeURL, fakeURL},
+				clientFactory: newStaticHTTPClientFactory(
+					[]staticHTTPResponse{
+						staticHTTPResponse{err: ErrTimeout},
+						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
+					},
+				),
+			},
+			wantErr: ErrTimeout,
+		},
+
+		// ErrCanceled short-circuits Do
+		{
+			client: &httpClusterClient{
+				endpoints: []url.URL{fakeURL, fakeURL},
+				clientFactory: newStaticHTTPClientFactory(
+					[]staticHTTPResponse{
+						staticHTTPResponse{err: ErrCanceled},
+						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
+					},
+				),
+			},
+			wantErr: ErrCanceled,
+		},
+
+		// return err if there are no endpoints
+		{
+			client: &httpClusterClient{
+				endpoints:     []url.URL{},
+				clientFactory: newHTTPClientFactory(nil),
+			},
+			wantErr: ErrNoEndpoints,
+		},
+
+		// return err if all endpoints return arbitrary errors
+		{
+			client: &httpClusterClient{
+				endpoints: []url.URL{fakeURL, fakeURL},
+				clientFactory: newStaticHTTPClientFactory(
+					[]staticHTTPResponse{
+						staticHTTPResponse{err: fakeErr},
+						staticHTTPResponse{err: fakeErr},
+					},
+				),
+			},
+			wantErr: fakeErr,
+		},
+
+		// 500-level errors cause Do to fallthrough to next endpoint
+		{
+			client: &httpClusterClient{
+				endpoints: []url.URL{fakeURL, fakeURL},
+				clientFactory: newStaticHTTPClientFactory(
+					[]staticHTTPResponse{
+						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusBadGateway}},
+						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
+					},
+				),
+			},
+			wantCode: http.StatusTeapot,
+		},
+	}
+
+	for i, tt := range tests {
+		resp, _, err := tt.client.Do(context.Background(), nil)
+		if !reflect.DeepEqual(tt.wantErr, err) {
+			t.Errorf("#%d: got err=%v, want=%v", i, err, tt.wantErr)
+			continue
+		}
+
+		if resp == nil {
+			if tt.wantCode != 0 {
+				t.Errorf("#%d: resp is nil, want=%d", i, tt.wantCode)
+			}
+			continue
+		}
+
+		if resp.StatusCode != tt.wantCode {
+			t.Errorf("#%d: resp code=%d, want=%d", i, resp.StatusCode, tt.wantCode)
+			continue
+		}
+	}
+}
+
+func TestRedirectedHTTPAction(t *testing.T) {
+	act := &redirectedHTTPAction{
+		action: &staticHTTPAction{
+			request: http.Request{
+				Method: "DELETE",
+				URL: &url.URL{
+					Scheme: "https",
+					Host:   "foo.example.com",
+					Path:   "/ping",
+				},
+			},
+		},
+		location: url.URL{
+			Scheme: "https",
+			Host:   "bar.example.com",
+			Path:   "/pong",
+		},
+	}
+
+	want := &http.Request{
+		Method: "DELETE",
+		URL: &url.URL{
+			Scheme: "https",
+			Host:   "bar.example.com",
+			Path:   "/pong",
+		},
+	}
+	got := act.HTTPRequest(url.URL{Scheme: "http", Host: "baz.example.com", Path: "/pang"})
+
+	if !reflect.DeepEqual(want, got) {
+		t.Fatalf("HTTPRequest is %#v, want %#v", want, got)
+	}
+}
+
+func TestRedirectFollowingHTTPClient(t *testing.T) {
+	tests := []struct {
+		max      int
+		client   httpClient
+		wantCode int
+		wantErr  error
+	}{
+		// errors bubbled up
+		{
+			max: 2,
+			client: &multiStaticHTTPClient{
+				responses: []staticHTTPResponse{
+					staticHTTPResponse{
+						err: errors.New("fail!"),
+					},
+				},
+			},
+			wantErr: errors.New("fail!"),
+		},
+
+		// no need to follow redirect if none given
+		{
+			max: 2,
+			client: &multiStaticHTTPClient{
+				responses: []staticHTTPResponse{
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTeapot,
+						},
+					},
+				},
+			},
+			wantCode: http.StatusTeapot,
+		},
+
+		// redirects if less than max
+		{
+			max: 2,
+			client: &multiStaticHTTPClient{
+				responses: []staticHTTPResponse{
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTemporaryRedirect,
+							Header:     http.Header{"Location": []string{"http://example.com"}},
+						},
+					},
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTeapot,
+						},
+					},
+				},
+			},
+			wantCode: http.StatusTeapot,
+		},
+
+		// succeed after reaching max redirects
+		{
+			max: 2,
+			client: &multiStaticHTTPClient{
+				responses: []staticHTTPResponse{
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTemporaryRedirect,
+							Header:     http.Header{"Location": []string{"http://example.com"}},
+						},
+					},
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTemporaryRedirect,
+							Header:     http.Header{"Location": []string{"http://example.com"}},
+						},
+					},
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTeapot,
+						},
+					},
+				},
+			},
+			wantCode: http.StatusTeapot,
+		},
+
+		// fail at max+1 redirects
+		{
+			max: 1,
+			client: &multiStaticHTTPClient{
+				responses: []staticHTTPResponse{
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTemporaryRedirect,
+							Header:     http.Header{"Location": []string{"http://example.com"}},
+						},
+					},
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTemporaryRedirect,
+							Header:     http.Header{"Location": []string{"http://example.com"}},
+						},
+					},
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTeapot,
+						},
+					},
+				},
+			},
+			wantErr: ErrTooManyRedirects,
+		},
+
+		// fail if Location header not set
+		{
+			max: 1,
+			client: &multiStaticHTTPClient{
+				responses: []staticHTTPResponse{
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTemporaryRedirect,
+						},
+					},
+				},
+			},
+			wantErr: errors.New("Location header not set"),
+		},
+
+		// fail if Location header is invalid
+		{
+			max: 1,
+			client: &multiStaticHTTPClient{
+				responses: []staticHTTPResponse{
+					staticHTTPResponse{
+						resp: http.Response{
+							StatusCode: http.StatusTemporaryRedirect,
+							Header:     http.Header{"Location": []string{":"}},
+						},
+					},
+				},
+			},
+			wantErr: errors.New("Location header not valid URL: :"),
+		},
+	}
+
+	for i, tt := range tests {
+		client := &redirectFollowingHTTPClient{client: tt.client, max: tt.max}
+		resp, _, err := client.Do(context.Background(), nil)
+		if !reflect.DeepEqual(tt.wantErr, err) {
+			t.Errorf("#%d: got err=%v, want=%v", i, err, tt.wantErr)
+			continue
+		}
+
+		if resp == nil {
+			if tt.wantCode != 0 {
+				t.Errorf("#%d: resp is nil, want=%d", i, tt.wantCode)
+			}
+			continue
+		}
+
+		if resp.StatusCode != tt.wantCode {
+			t.Errorf("#%d: resp code=%d, want=%d", i, resp.StatusCode, tt.wantCode)
+			continue
+		}
+	}
+}
diff --git a/client/http.go b/client/http.go
deleted file mode 100644
index 49a40b6..0000000
--- a/client/http.go
+++ /dev/null
@@ -1,257 +0,0 @@
-// Copyright 2015 CoreOS, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package client
-
-import (
-	"errors"
-	"fmt"
-	"io/ioutil"
-	"net/http"
-	"net/url"
-	"sync"
-
-	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
-)
-
-func newHTTPClientFactory(tr CancelableTransport) httpClientFactory {
-	return func(ep url.URL) httpClient {
-		return &redirectFollowingHTTPClient{
-			max: DefaultMaxRedirects,
-			client: &simpleHTTPClient{
-				transport: tr,
-				endpoint:  ep,
-			},
-		}
-	}
-}
-
-type Config struct {
-	Endpoints []string
-	Transport CancelableTransport
-}
-
-func New(cfg Config) (Client, error) {
-	c := &httpClusterClient{clientFactory: newHTTPClientFactory(cfg.Transport)}
-	if err := c.reset(cfg.Endpoints); err != nil {
-		return nil, err
-	}
-	return c, nil
-}
-
-type Client interface {
-	Sync(context.Context) error
-	Endpoints() []string
-
-	httpClient
-}
-
-type httpClient interface {
-	Do(context.Context, httpAction) (*http.Response, []byte, error)
-}
-
-type httpClientFactory func(url.URL) httpClient
-
-type httpAction interface {
-	HTTPRequest(url.URL) *http.Request
-}
-
-// CancelableTransport mimics http.Transport to provide an interface which can be
-// substituted for testing (since the RoundTripper interface alone does not
-// require the CancelRequest method)
-type CancelableTransport interface {
-	http.RoundTripper
-	CancelRequest(req *http.Request)
-}
-
-type httpClusterClient struct {
-	clientFactory httpClientFactory
-	endpoints     []url.URL
-	sync.RWMutex
-}
-
-func (c *httpClusterClient) reset(eps []string) error {
-	if len(eps) == 0 {
-		return ErrNoEndpoints
-	}
-
-	neps := make([]url.URL, len(eps))
-	for i, ep := range eps {
-		u, err := url.Parse(ep)
-		if err != nil {
-			return err
-		}
-		neps[i] = *u
-	}
-
-	c.endpoints = neps
-
-	return nil
-}
-
-func (c *httpClusterClient) Do(ctx context.Context, act httpAction) (resp *http.Response, body []byte, err error) {
-	c.RLock()
-	leps := len(c.endpoints)
-	eps := make([]url.URL, leps)
-	n := copy(eps, c.endpoints)
-	c.RUnlock()
-
-	if leps == 0 {
-		err = ErrNoEndpoints
-		return
-	}
-
-	if leps != n {
-		err = errors.New("unable to pick endpoint: copy failed")
-		return
-	}
-
-	for _, ep := range eps {
-		hc := c.clientFactory(ep)
-		resp, body, err = hc.Do(ctx, act)
-		if err != nil {
-			if err == ErrTimeout || err == ErrCanceled {
-				return nil, nil, err
-			}
-			continue
-		}
-		if resp.StatusCode/100 == 5 {
-			continue
-		}
-		break
-	}
-
-	return
-}
-
-func (c *httpClusterClient) Endpoints() []string {
-	c.RLock()
-	defer c.RUnlock()
-
-	eps := make([]string, len(c.endpoints))
-	for i, ep := range c.endpoints {
-		eps[i] = ep.String()
-	}
-
-	return eps
-}
-
-func (c *httpClusterClient) Sync(ctx context.Context) error {
-	c.Lock()
-	defer c.Unlock()
-
-	mAPI := NewMembersAPI(c)
-	ms, err := mAPI.List(ctx)
-	if err != nil {
-		return err
-	}
-
-	eps := make([]string, 0)
-	for _, m := range ms {
-		eps = append(eps, m.ClientURLs...)
-	}
-
-	return c.reset(eps)
-}
-
-type roundTripResponse struct {
-	resp *http.Response
-	err  error
-}
-
-type simpleHTTPClient struct {
-	transport CancelableTransport
-	endpoint  url.URL
-}
-
-func (c *simpleHTTPClient) Do(ctx context.Context, act httpAction) (*http.Response, []byte, error) {
-	req := act.HTTPRequest(c.endpoint)
-
-	rtchan := make(chan roundTripResponse, 1)
-	go func() {
-		resp, err := c.transport.RoundTrip(req)
-		rtchan <- roundTripResponse{resp: resp, err: err}
-		close(rtchan)
-	}()
-
-	var resp *http.Response
-	var err error
-
-	select {
-	case rtresp := <-rtchan:
-		resp, err = rtresp.resp, rtresp.err
-	case <-ctx.Done():
-		c.transport.CancelRequest(req)
-		// wait for request to actually exit before continuing
-		<-rtchan
-		err = ctx.Err()
-	}
-
-	// always check for resp nil-ness to deal with possible
-	// race conditions between channels above
-	defer func() {
-		if resp != nil {
-			resp.Body.Close()
-		}
-	}()
-
-	if err != nil {
-		return nil, nil, err
-	}
-
-	body, err := ioutil.ReadAll(resp.Body)
-	return resp, body, err
-}
-
-type redirectFollowingHTTPClient struct {
-	client httpClient
-	max    int
-}
-
-func (r *redirectFollowingHTTPClient) Do(ctx context.Context, act httpAction) (*http.Response, []byte, error) {
-	for i := 0; i <= r.max; i++ {
-		resp, body, err := r.client.Do(ctx, act)
-		if err != nil {
-			return nil, nil, err
-		}
-		if resp.StatusCode/100 == 3 {
-			hdr := resp.Header.Get("Location")
-			if hdr == "" {
-				return nil, nil, fmt.Errorf("Location header not set")
-			}
-			loc, err := url.Parse(hdr)
-			if err != nil {
-				return nil, nil, fmt.Errorf("Location header not valid URL: %s", hdr)
-			}
-			act = &redirectedHTTPAction{
-				action:   act,
-				location: *loc,
-			}
-			continue
-		}
-		return resp, body, nil
-	}
-	return nil, nil, ErrTooManyRedirects
-}
-
-type redirectedHTTPAction struct {
-	action   httpAction
-	location url.URL
-}
-
-func (r *redirectedHTTPAction) HTTPRequest(ep url.URL) *http.Request {
-	orig := r.action.HTTPRequest(ep)
-	orig.URL = &r.location
-	return orig
-}
diff --git a/client/http_test.go b/client/http_test.go
deleted file mode 100644
index ab6be99..0000000
--- a/client/http_test.go
+++ /dev/null
@@ -1,512 +0,0 @@
-// Copyright 2015 CoreOS, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package client
-
-import (
-	"errors"
-	"io/ioutil"
-	"net/http"
-	"net/url"
-	"reflect"
-	"strings"
-	"testing"
-	"time"
-
-	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
-)
-
-type staticHTTPClient struct {
-	resp http.Response
-	err  error
-}
-
-func (s *staticHTTPClient) Do(context.Context, httpAction) (*http.Response, []byte, error) {
-	return &s.resp, nil, s.err
-}
-
-type staticHTTPAction struct {
-	request http.Request
-}
-
-type staticHTTPResponse struct {
-	resp http.Response
-	err  error
-}
-
-func (s *staticHTTPAction) HTTPRequest(url.URL) *http.Request {
-	return &s.request
-}
-
-type multiStaticHTTPClient struct {
-	responses []staticHTTPResponse
-	cur       int
-}
-
-func (s *multiStaticHTTPClient) Do(context.Context, httpAction) (*http.Response, []byte, error) {
-	r := s.responses[s.cur]
-	s.cur++
-	return &r.resp, nil, r.err
-}
-
-func newStaticHTTPClientFactory(responses []staticHTTPResponse) httpClientFactory {
-	var cur int
-	return func(url.URL) httpClient {
-		r := responses[cur]
-		cur++
-		return &staticHTTPClient{resp: r.resp, err: r.err}
-	}
-}
-
-type fakeTransport struct {
-	respchan     chan *http.Response
-	errchan      chan error
-	startCancel  chan struct{}
-	finishCancel chan struct{}
-}
-
-func newFakeTransport() *fakeTransport {
-	return &fakeTransport{
-		respchan:     make(chan *http.Response, 1),
-		errchan:      make(chan error, 1),
-		startCancel:  make(chan struct{}, 1),
-		finishCancel: make(chan struct{}, 1),
-	}
-}
-
-func (t *fakeTransport) RoundTrip(*http.Request) (*http.Response, error) {
-	select {
-	case resp := <-t.respchan:
-		return resp, nil
-	case err := <-t.errchan:
-		return nil, err
-	case <-t.startCancel:
-		// wait on finishCancel to simulate taking some amount of
-		// time while calling CancelRequest
-		<-t.finishCancel
-		return nil, errors.New("cancelled")
-	}
-}
-
-func (t *fakeTransport) CancelRequest(*http.Request) {
-	t.startCancel <- struct{}{}
-}
-
-type fakeAction struct{}
-
-func (a *fakeAction) HTTPRequest(url.URL) *http.Request {
-	return &http.Request{}
-}
-
-func TestSimpleHTTPClientDoSuccess(t *testing.T) {
-	tr := newFakeTransport()
-	c := &simpleHTTPClient{transport: tr}
-
-	tr.respchan <- &http.Response{
-		StatusCode: http.StatusTeapot,
-		Body:       ioutil.NopCloser(strings.NewReader("foo")),
-	}
-
-	resp, body, err := c.Do(context.Background(), &fakeAction{})
-	if err != nil {
-		t.Fatalf("incorrect error value: want=nil got=%v", err)
-	}
-
-	wantCode := http.StatusTeapot
-	if wantCode != resp.StatusCode {
-		t.Fatalf("invalid response code: want=%d got=%d", wantCode, resp.StatusCode)
-	}
-
-	wantBody := []byte("foo")
-	if !reflect.DeepEqual(wantBody, body) {
-		t.Fatalf("invalid response body: want=%q got=%q", wantBody, body)
-	}
-}
-
-func TestSimpleHTTPClientDoError(t *testing.T) {
-	tr := newFakeTransport()
-	c := &simpleHTTPClient{transport: tr}
-
-	tr.errchan <- errors.New("fixture")
-
-	_, _, err := c.Do(context.Background(), &fakeAction{})
-	if err == nil {
-		t.Fatalf("expected non-nil error, got nil")
-	}
-}
-
-func TestSimpleHTTPClientDoCancelContext(t *testing.T) {
-	tr := newFakeTransport()
-	c := &simpleHTTPClient{transport: tr}
-
-	tr.startCancel <- struct{}{}
-	tr.finishCancel <- struct{}{}
-
-	_, _, err := c.Do(context.Background(), &fakeAction{})
-	if err == nil {
-		t.Fatalf("expected non-nil error, got nil")
-	}
-}
-
-func TestSimpleHTTPClientDoCancelContextWaitForRoundTrip(t *testing.T) {
-	tr := newFakeTransport()
-	c := &simpleHTTPClient{transport: tr}
-
-	donechan := make(chan struct{})
-	ctx, cancel := context.WithCancel(context.Background())
-	go func() {
-		c.Do(ctx, &fakeAction{})
-		close(donechan)
-	}()
-
-	// This should call CancelRequest and begin the cancellation process
-	cancel()
-
-	select {
-	case <-donechan:
-		t.Fatalf("simpleHTTPClient.Do should not have exited yet")
-	default:
-	}
-
-	tr.finishCancel <- struct{}{}
-
-	select {
-	case <-donechan:
-		//expected behavior
-		return
-	case <-time.After(time.Second):
-		t.Fatalf("simpleHTTPClient.Do did not exit within 1s")
-	}
-}
-
-func TestHTTPClusterClientDo(t *testing.T) {
-	fakeErr := errors.New("fake!")
-	fakeURL := url.URL{}
-	tests := []struct {
-		client   *httpClusterClient
-		wantCode int
-		wantErr  error
-	}{
-		// first good response short-circuits Do
-		{
-			client: &httpClusterClient{
-				endpoints: []url.URL{fakeURL, fakeURL},
-				clientFactory: newStaticHTTPClientFactory(
-					[]staticHTTPResponse{
-						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
-						staticHTTPResponse{err: fakeErr},
-					},
-				),
-			},
-			wantCode: http.StatusTeapot,
-		},
-
-		// fall through to good endpoint if err is arbitrary
-		{
-			client: &httpClusterClient{
-				endpoints: []url.URL{fakeURL, fakeURL},
-				clientFactory: newStaticHTTPClientFactory(
-					[]staticHTTPResponse{
-						staticHTTPResponse{err: fakeErr},
-						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
-					},
-				),
-			},
-			wantCode: http.StatusTeapot,
-		},
-
-		// ErrTimeout short-circuits Do
-		{
-			client: &httpClusterClient{
-				endpoints: []url.URL{fakeURL, fakeURL},
-				clientFactory: newStaticHTTPClientFactory(
-					[]staticHTTPResponse{
-						staticHTTPResponse{err: ErrTimeout},
-						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
-					},
-				),
-			},
-			wantErr: ErrTimeout,
-		},
-
-		// ErrCanceled short-circuits Do
-		{
-			client: &httpClusterClient{
-				endpoints: []url.URL{fakeURL, fakeURL},
-				clientFactory: newStaticHTTPClientFactory(
-					[]staticHTTPResponse{
-						staticHTTPResponse{err: ErrCanceled},
-						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
-					},
-				),
-			},
-			wantErr: ErrCanceled,
-		},
-
-		// return err if there are no endpoints
-		{
-			client: &httpClusterClient{
-				endpoints:     []url.URL{},
-				clientFactory: newHTTPClientFactory(nil),
-			},
-			wantErr: ErrNoEndpoints,
-		},
-
-		// return err if all endpoints return arbitrary errors
-		{
-			client: &httpClusterClient{
-				endpoints: []url.URL{fakeURL, fakeURL},
-				clientFactory: newStaticHTTPClientFactory(
-					[]staticHTTPResponse{
-						staticHTTPResponse{err: fakeErr},
-						staticHTTPResponse{err: fakeErr},
-					},
-				),
-			},
-			wantErr: fakeErr,
-		},
-
-		// 500-level errors cause Do to fallthrough to next endpoint
-		{
-			client: &httpClusterClient{
-				endpoints: []url.URL{fakeURL, fakeURL},
-				clientFactory: newStaticHTTPClientFactory(
-					[]staticHTTPResponse{
-						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusBadGateway}},
-						staticHTTPResponse{resp: http.Response{StatusCode: http.StatusTeapot}},
-					},
-				),
-			},
-			wantCode: http.StatusTeapot,
-		},
-	}
-
-	for i, tt := range tests {
-		resp, _, err := tt.client.Do(context.Background(), nil)
-		if !reflect.DeepEqual(tt.wantErr, err) {
-			t.Errorf("#%d: got err=%v, want=%v", i, err, tt.wantErr)
-			continue
-		}
-
-		if resp == nil {
-			if tt.wantCode != 0 {
-				t.Errorf("#%d: resp is nil, want=%d", i, tt.wantCode)
-			}
-			continue
-		}
-
-		if resp.StatusCode != tt.wantCode {
-			t.Errorf("#%d: resp code=%d, want=%d", i, resp.StatusCode, tt.wantCode)
-			continue
-		}
-	}
-}
-
-func TestRedirectedHTTPAction(t *testing.T) {
-	act := &redirectedHTTPAction{
-		action: &staticHTTPAction{
-			request: http.Request{
-				Method: "DELETE",
-				URL: &url.URL{
-					Scheme: "https",
-					Host:   "foo.example.com",
-					Path:   "/ping",
-				},
-			},
-		},
-		location: url.URL{
-			Scheme: "https",
-			Host:   "bar.example.com",
-			Path:   "/pong",
-		},
-	}
-
-	want := &http.Request{
-		Method: "DELETE",
-		URL: &url.URL{
-			Scheme: "https",
-			Host:   "bar.example.com",
-			Path:   "/pong",
-		},
-	}
-	got := act.HTTPRequest(url.URL{Scheme: "http", Host: "baz.example.com", Path: "/pang"})
-
-	if !reflect.DeepEqual(want, got) {
-		t.Fatalf("HTTPRequest is %#v, want %#v", want, got)
-	}
-}
-
-func TestRedirectFollowingHTTPClient(t *testing.T) {
-	tests := []struct {
-		max      int
-		client   httpClient
-		wantCode int
-		wantErr  error
-	}{
-		// errors bubbled up
-		{
-			max: 2,
-			client: &multiStaticHTTPClient{
-				responses: []staticHTTPResponse{
-					staticHTTPResponse{
-						err: errors.New("fail!"),
-					},
-				},
-			},
-			wantErr: errors.New("fail!"),
-		},
-
-		// no need to follow redirect if none given
-		{
-			max: 2,
-			client: &multiStaticHTTPClient{
-				responses: []staticHTTPResponse{
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTeapot,
-						},
-					},
-				},
-			},
-			wantCode: http.StatusTeapot,
-		},
-
-		// redirects if less than max
-		{
-			max: 2,
-			client: &multiStaticHTTPClient{
-				responses: []staticHTTPResponse{
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTemporaryRedirect,
-							Header:     http.Header{"Location": []string{"http://example.com"}},
-						},
-					},
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTeapot,
-						},
-					},
-				},
-			},
-			wantCode: http.StatusTeapot,
-		},
-
-		// succeed after reaching max redirects
-		{
-			max: 2,
-			client: &multiStaticHTTPClient{
-				responses: []staticHTTPResponse{
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTemporaryRedirect,
-							Header:     http.Header{"Location": []string{"http://example.com"}},
-						},
-					},
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTemporaryRedirect,
-							Header:     http.Header{"Location": []string{"http://example.com"}},
-						},
-					},
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTeapot,
-						},
-					},
-				},
-			},
-			wantCode: http.StatusTeapot,
-		},
-
-		// fail at max+1 redirects
-		{
-			max: 1,
-			client: &multiStaticHTTPClient{
-				responses: []staticHTTPResponse{
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTemporaryRedirect,
-							Header:     http.Header{"Location": []string{"http://example.com"}},
-						},
-					},
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTemporaryRedirect,
-							Header:     http.Header{"Location": []string{"http://example.com"}},
-						},
-					},
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTeapot,
-						},
-					},
-				},
-			},
-			wantErr: ErrTooManyRedirects,
-		},
-
-		// fail if Location header not set
-		{
-			max: 1,
-			client: &multiStaticHTTPClient{
-				responses: []staticHTTPResponse{
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTemporaryRedirect,
-						},
-					},
-				},
-			},
-			wantErr: errors.New("Location header not set"),
-		},
-
-		// fail if Location header is invalid
-		{
-			max: 1,
-			client: &multiStaticHTTPClient{
-				responses: []staticHTTPResponse{
-					staticHTTPResponse{
-						resp: http.Response{
-							StatusCode: http.StatusTemporaryRedirect,
-							Header:     http.Header{"Location": []string{":"}},
-						},
-					},
-				},
-			},
-			wantErr: errors.New("Location header not valid URL: :"),
-		},
-	}
-
-	for i, tt := range tests {
-		client := &redirectFollowingHTTPClient{client: tt.client, max: tt.max}
-		resp, _, err := client.Do(context.Background(), nil)
-		if !reflect.DeepEqual(tt.wantErr, err) {
-			t.Errorf("#%d: got err=%v, want=%v", i, err, tt.wantErr)
-			continue
-		}
-
-		if resp == nil {
-			if tt.wantCode != 0 {
-				t.Errorf("#%d: resp is nil, want=%d", i, tt.wantCode)
-			}
-			continue
-		}
-
-		if resp.StatusCode != tt.wantCode {
-			t.Errorf("#%d: resp code=%d, want=%d", i, resp.StatusCode, tt.wantCode)
-			continue
-		}
-	}
-}
