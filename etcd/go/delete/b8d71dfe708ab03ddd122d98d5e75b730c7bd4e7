commit b8d71dfe708ab03ddd122d98d5e75b730c7bd4e7
Author: Xiang Li <xiang.li@coreos.com>
Date:   Fri Jul 11 12:28:17 2014 -0700

    v2: remove old tests

diff --git a/server/v2/tests/delete_handler_test.go b/server/v2/tests/delete_handler_test.go
deleted file mode 100644
index d34daf7..0000000
--- a/server/v2/tests/delete_handler_test.go
+++ /dev/null
@@ -1,203 +0,0 @@
-package v2
-
-import (
-	"fmt"
-	"net/http"
-	"net/url"
-	"testing"
-
-	"github.com/coreos/etcd/server"
-	"github.com/coreos/etcd/tests"
-	"github.com/coreos/etcd/third_party/github.com/stretchr/testify/assert"
-)
-
-// Ensures that a key is deleted.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X DELETE localhost:4001/v2/keys/foo/bar
-//
-func TestV2DeleteKey(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, err := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		tests.ReadBody(resp)
-		resp, err = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), url.Values{})
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		body := tests.ReadBody(resp)
-		assert.Nil(t, err, "")
-		assert.Equal(t, string(body), `{"action":"delete","node":{"key":"/foo/bar","modifiedIndex":4,"createdIndex":3},"prevNode":{"key":"/foo/bar","value":"XXX","modifiedIndex":3,"createdIndex":3}}`, "")
-	})
-}
-
-// Ensures that an empty directory is deleted when dir is set.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo?dir=true
-//   $ curl -X DELETE localhost:4001/v2/keys/foo ->fail
-//   $ curl -X DELETE localhost:4001/v2/keys/foo?dir=true
-//
-func TestV2DeleteEmptyDirectory(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		resp, err := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?dir=true"), url.Values{})
-		tests.ReadBody(resp)
-		resp, err = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo"), url.Values{})
-		assert.Equal(t, resp.StatusCode, http.StatusForbidden)
-		bodyJson := tests.ReadBodyJSON(resp)
-		assert.Equal(t, bodyJson["errorCode"], 102, "")
-		resp, err = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?dir=true"), url.Values{})
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		body := tests.ReadBody(resp)
-		assert.Nil(t, err, "")
-		assert.Equal(t, string(body), `{"action":"delete","node":{"key":"/foo","dir":true,"modifiedIndex":4,"createdIndex":3},"prevNode":{"key":"/foo","dir":true,"modifiedIndex":3,"createdIndex":3}}`, "")
-	})
-}
-
-// Ensures that a not-empty directory is deleted when dir is set.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar?dir=true
-//   $ curl -X DELETE localhost:4001/v2/keys/foo?dir=true ->fail
-//   $ curl -X DELETE localhost:4001/v2/keys/foo?dir=true&recursive=true
-//
-func TestV2DeleteNonEmptyDirectory(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		resp, err := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar?dir=true"), url.Values{})
-		tests.ReadBody(resp)
-		resp, err = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?dir=true"), url.Values{})
-		assert.Equal(t, resp.StatusCode, http.StatusForbidden)
-		bodyJson := tests.ReadBodyJSON(resp)
-		assert.Equal(t, bodyJson["errorCode"], 108, "")
-		resp, err = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?dir=true&recursive=true"), url.Values{})
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		body := tests.ReadBody(resp)
-		assert.Nil(t, err, "")
-		assert.Equal(t, string(body), `{"action":"delete","node":{"key":"/foo","dir":true,"modifiedIndex":4,"createdIndex":3},"prevNode":{"key":"/foo","dir":true,"modifiedIndex":3,"createdIndex":3}}`, "")
-	})
-}
-
-// Ensures that a directory is deleted when recursive is set.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo?dir=true
-//   $ curl -X DELETE localhost:4001/v2/keys/foo?recursive=true
-//
-func TestV2DeleteDirectoryRecursiveImpliesDir(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		resp, err := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?dir=true"), url.Values{})
-		tests.ReadBody(resp)
-		resp, err = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?recursive=true"), url.Values{})
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		body := tests.ReadBody(resp)
-		assert.Nil(t, err, "")
-		assert.Equal(t, string(body), `{"action":"delete","node":{"key":"/foo","dir":true,"modifiedIndex":4,"createdIndex":3},"prevNode":{"key":"/foo","dir":true,"modifiedIndex":3,"createdIndex":3}}`, "")
-	})
-}
-
-// Ensures that a key is deleted if the previous index matches
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo -d value=XXX
-//   $ curl -X DELETE localhost:4001/v2/keys/foo?prevIndex=3
-//
-func TestV2DeleteKeyCADOnIndexSuccess(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, err := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo"), v)
-		tests.ReadBody(resp)
-		resp, err = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?prevIndex=3"), url.Values{})
-		assert.Nil(t, err, "")
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["action"], "compareAndDelete", "")
-
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["key"], "/foo", "")
-		assert.Equal(t, node["modifiedIndex"], 4, "")
-	})
-}
-
-// Ensures that a key is not deleted if the previous index does not match
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo -d value=XXX
-//   $ curl -X DELETE localhost:4001/v2/keys/foo?prevIndex=100
-//
-func TestV2DeleteKeyCADOnIndexFail(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, err := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo"), v)
-		tests.ReadBody(resp)
-		resp, err = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?prevIndex=100"), url.Values{})
-		assert.Nil(t, err, "")
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 101)
-	})
-}
-
-// Ensures that an error is thrown if an invalid previous index is provided.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X DELETE localhost:4001/v2/keys/foo/bar?prevIndex=bad_index
-//
-func TestV2DeleteKeyCADWithInvalidIndex(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		tests.ReadBody(resp)
-		resp, _ = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar?prevIndex=bad_index"), v)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 203)
-	})
-}
-
-// Ensures that a key is deleted only if the previous value matches.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X DELETE localhost:4001/v2/keys/foo/bar?prevValue=XXX
-//
-func TestV2DeleteKeyCADOnValueSuccess(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		tests.ReadBody(resp)
-		resp, _ = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar?prevValue=XXX"), v)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["action"], "compareAndDelete", "")
-
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["modifiedIndex"], 4, "")
-	})
-}
-
-// Ensures that a key is not deleted if the previous value does not match.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X DELETE localhost:4001/v2/keys/foo/bar?prevValue=YYY
-//
-func TestV2DeleteKeyCADOnValueFail(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		tests.ReadBody(resp)
-		resp, _ = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar?prevValue=YYY"), v)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 101)
-	})
-}
-
-// Ensures that an error is thrown if an invalid previous value is provided.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X DELETE localhost:4001/v2/keys/foo/bar?prevIndex=
-//
-func TestV2DeleteKeyCADWithInvalidValue(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		tests.ReadBody(resp)
-		resp, _ = tests.DeleteForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar?prevValue="), v)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 201)
-	})
-}
diff --git a/server/v2/tests/get_handler_test.go b/server/v2/tests/get_handler_test.go
deleted file mode 100644
index 23a5822..0000000
--- a/server/v2/tests/get_handler_test.go
+++ /dev/null
@@ -1,265 +0,0 @@
-package v2
-
-import (
-	"fmt"
-	"net/http"
-	"net/url"
-	"testing"
-	"time"
-
-	"github.com/coreos/etcd/server"
-	"github.com/coreos/etcd/tests"
-	"github.com/coreos/etcd/third_party/github.com/stretchr/testify/assert"
-)
-
-// Ensures that a value can be retrieve for a given key.
-//
-//   $ curl localhost:4001/v2/keys/foo/bar -> fail
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl localhost:4001/v2/keys/foo/bar
-//
-func TestV2GetKey(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.Get(fullURL)
-		assert.Equal(t, resp.Header.Get("Content-Type"), "application/json")
-		assert.Equal(t, resp.StatusCode, http.StatusNotFound)
-
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.Header.Get("Content-Type"), "application/json")
-		tests.ReadBody(resp)
-
-		resp, _ = tests.Get(fullURL)
-		assert.Equal(t, resp.Header.Get("Content-Type"), "application/json")
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["action"], "get", "")
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["key"], "/foo/bar", "")
-		assert.Equal(t, node["value"], "XXX", "")
-		assert.Equal(t, node["modifiedIndex"], 3, "")
-	})
-}
-
-// Ensures that a directory of values can be recursively retrieved for a given key.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/x -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/y/z -d value=YYY
-//   $ curl localhost:4001/v2/keys/foo -d recursive=true
-//
-func TestV2GetKeyRecursively(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		v.Set("ttl", "10")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/x"), v)
-		tests.ReadBody(resp)
-
-		v.Set("value", "YYY")
-		resp, _ = tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/y/z"), v)
-		tests.ReadBody(resp)
-
-		resp, _ = tests.Get(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?recursive=true"))
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["action"], "get", "")
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["key"], "/foo", "")
-		assert.Equal(t, node["dir"], true, "")
-		assert.Equal(t, node["modifiedIndex"], 3, "")
-		assert.Equal(t, len(node["nodes"].([]interface{})), 2, "")
-
-		node0 := node["nodes"].([]interface{})[0].(map[string]interface{})
-		assert.Equal(t, node0["key"], "/foo/x", "")
-		assert.Equal(t, node0["value"], "XXX", "")
-		assert.Equal(t, node0["ttl"], 10, "")
-
-		node1 := node["nodes"].([]interface{})[1].(map[string]interface{})
-		assert.Equal(t, node1["key"], "/foo/y", "")
-		assert.Equal(t, node1["dir"], true, "")
-
-		node2 := node1["nodes"].([]interface{})[0].(map[string]interface{})
-		assert.Equal(t, node2["key"], "/foo/y/z", "")
-		assert.Equal(t, node2["value"], "YYY", "")
-	})
-}
-
-// Ensures that a watcher can wait for a value to be set and return it to the client.
-//
-//   $ curl localhost:4001/v2/keys/foo/bar?wait=true
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//
-func TestV2WatchKey(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		// There exists a little gap between etcd ready to serve and
-		// it actually serves the first request, which means the response
-		// delay could be a little bigger.
-		// This test is time sensitive, so it does one request to ensure
-		// that the server is working.
-		tests.Get(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"))
-
-		var watchResp *http.Response
-		c := make(chan bool)
-		go func() {
-			watchResp, _ = tests.Get(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar?wait=true"))
-			c <- true
-		}()
-
-		// Make sure response didn't fire early.
-		time.Sleep(1 * time.Millisecond)
-
-		// Set a value.
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		tests.ReadBody(resp)
-
-		// A response should follow from the GET above.
-		time.Sleep(1 * time.Millisecond)
-
-		select {
-		case <-c:
-
-		default:
-			t.Fatal("cannot get watch result")
-		}
-
-		body := tests.ReadBodyJSON(watchResp)
-		assert.NotNil(t, body, "")
-		assert.Equal(t, body["action"], "set", "")
-
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["key"], "/foo/bar", "")
-		assert.Equal(t, node["value"], "XXX", "")
-		assert.Equal(t, node["modifiedIndex"], 3, "")
-	})
-}
-
-// Ensures that a watcher can wait for a value to be set after a given index.
-//
-//   $ curl localhost:4001/v2/keys/foo/bar?wait=true&waitIndex=4
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY
-//
-func TestV2WatchKeyWithIndex(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		var body map[string]interface{}
-		c := make(chan bool)
-		go func() {
-			resp, _ := tests.Get(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar?wait=true&waitIndex=4"))
-			body = tests.ReadBodyJSON(resp)
-			c <- true
-		}()
-
-		// Make sure response didn't fire early.
-		time.Sleep(1 * time.Millisecond)
-		assert.Nil(t, body, "")
-
-		// Set a value (before given index).
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		tests.ReadBody(resp)
-
-		// Make sure response didn't fire early.
-		time.Sleep(1 * time.Millisecond)
-		assert.Nil(t, body, "")
-
-		// Set a value (before given index).
-		v.Set("value", "YYY")
-		resp, _ = tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		tests.ReadBody(resp)
-
-		// A response should follow from the GET above.
-		time.Sleep(1 * time.Millisecond)
-
-		select {
-		case <-c:
-
-		default:
-			t.Fatal("cannot get watch result")
-		}
-
-		assert.NotNil(t, body, "")
-		assert.Equal(t, body["action"], "set", "")
-
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["key"], "/foo/bar", "")
-		assert.Equal(t, node["value"], "YYY", "")
-		assert.Equal(t, node["modifiedIndex"], 4, "")
-	})
-}
-
-// Ensures that a watcher can wait for a value to be set after a given index.
-//
-//   $ curl localhost:4001/v2/keys/keyindir/bar?wait=true
-//   $ curl -X PUT localhost:4001/v2/keys/keyindir -d dir=true -d ttl=1
-//   $ curl -X PUT localhost:4001/v2/keys/keyindir/bar -d value=YYY
-//
-func TestV2WatchKeyInDir(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		var body map[string]interface{}
-		c := make(chan bool)
-
-		// Set a value (before given index).
-		v := url.Values{}
-		v.Set("dir", "true")
-		v.Set("ttl", "1")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/keyindir"), v)
-		tests.ReadBody(resp)
-
-		// Set a value (before given index).
-		v = url.Values{}
-		v.Set("value", "XXX")
-		resp, _ = tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/keyindir/bar"), v)
-		tests.ReadBody(resp)
-
-		go func() {
-			resp, _ := tests.Get(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/keyindir/bar?wait=true"))
-			body = tests.ReadBodyJSON(resp)
-			c <- true
-		}()
-
-		// wait for expiration, we do have a up to 500 millisecond delay
-		time.Sleep(2000 * time.Millisecond)
-
-		select {
-		case <-c:
-
-		default:
-			t.Fatal("cannot get watch result")
-		}
-
-		assert.NotNil(t, body, "")
-		assert.Equal(t, body["action"], "expire", "")
-
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["key"], "/keyindir", "")
-	})
-}
-
-// Ensures that HEAD could work.
-//
-//   $ curl -I localhost:4001/v2/keys/foo/bar -> fail
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -I localhost:4001/v2/keys/foo/bar
-//
-func TestV2HeadKey(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.Head(fullURL)
-		assert.Equal(t, resp.StatusCode, http.StatusNotFound)
-		assert.Equal(t, resp.ContentLength, -1)
-
-		resp, _ = tests.PutForm(fullURL, v)
-		tests.ReadBody(resp)
-
-		resp, _ = tests.Head(fullURL)
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		assert.Equal(t, resp.ContentLength, -1)
-	})
-}
diff --git a/server/v2/tests/post_handler_test.go b/server/v2/tests/post_handler_test.go
deleted file mode 100644
index cb143e1..0000000
--- a/server/v2/tests/post_handler_test.go
+++ /dev/null
@@ -1,49 +0,0 @@
-package v2
-
-import (
-	"fmt"
-	"net/http"
-	"testing"
-
-	"github.com/coreos/etcd/server"
-	"github.com/coreos/etcd/tests"
-	"github.com/coreos/etcd/third_party/github.com/stretchr/testify/assert"
-)
-
-// Ensures a unique value is added to the key's children.
-//
-//   $ curl -X POST localhost:4001/v2/keys/foo/bar
-//   $ curl -X POST localhost:4001/v2/keys/foo/bar
-//   $ curl -X POST localhost:4001/v2/keys/foo/baz
-//
-func TestV2CreateUnique(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		// POST should add index to list.
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PostForm(fullURL, nil)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["action"], "create", "")
-
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["key"], "/foo/bar/3", "")
-		assert.Nil(t, node["dir"], "")
-		assert.Equal(t, node["modifiedIndex"], 3, "")
-
-		// Second POST should add next index to list.
-		resp, _ = tests.PostForm(fullURL, nil)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		body = tests.ReadBodyJSON(resp)
-
-		node = body["node"].(map[string]interface{})
-		assert.Equal(t, node["key"], "/foo/bar/4", "")
-
-		// POST to a different key should add index to that list.
-		resp, _ = tests.PostForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/baz"), nil)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		body = tests.ReadBodyJSON(resp)
-
-		node = body["node"].(map[string]interface{})
-		assert.Equal(t, node["key"], "/foo/baz/5", "")
-	})
-}
diff --git a/server/v2/tests/put_handler_test.go b/server/v2/tests/put_handler_test.go
deleted file mode 100644
index 318e71a..0000000
--- a/server/v2/tests/put_handler_test.go
+++ /dev/null
@@ -1,460 +0,0 @@
-package v2
-
-import (
-	"fmt"
-	"net/http"
-	"net/url"
-	"testing"
-	"time"
-
-	"github.com/coreos/etcd/server"
-	"github.com/coreos/etcd/tests"
-	"github.com/coreos/etcd/third_party/github.com/stretchr/testify/assert"
-)
-
-// Ensures that a key is set to a given value.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//
-func TestV2SetKey(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, err := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		body := tests.ReadBody(resp)
-		assert.Nil(t, err, "")
-		assert.Equal(t, string(body), `{"action":"set","node":{"key":"/foo/bar","value":"XXX","modifiedIndex":3,"createdIndex":3}}`, "")
-	})
-}
-
-// Ensures that a directory is created
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar?dir=true
-//
-func TestV2SetDirectory(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		resp, err := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?dir=true"), url.Values{})
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		body := tests.ReadBody(resp)
-		assert.Nil(t, err, "")
-		assert.Equal(t, string(body), `{"action":"set","node":{"key":"/foo","dir":true,"modifiedIndex":3,"createdIndex":3}}`, "")
-	})
-}
-
-// Ensures that a time-to-live is added to a key.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX -d ttl=20
-//
-func TestV2SetKeyWithTTL(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		t0 := time.Now()
-		v := url.Values{}
-		v.Set("value", "XXX")
-		v.Set("ttl", "20")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		body := tests.ReadBodyJSON(resp)
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["ttl"], 20, "")
-
-		// Make sure the expiration date is correct.
-		expiration, _ := time.Parse(time.RFC3339Nano, node["expiration"].(string))
-		assert.Equal(t, expiration.Sub(t0)/time.Second, 20, "")
-	})
-}
-
-// Ensures that an invalid time-to-live is returned as an error.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX -d ttl=bad_ttl
-//
-func TestV2SetKeyWithBadTTL(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		v.Set("ttl", "bad_ttl")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusBadRequest)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 202, "")
-		assert.Equal(t, body["message"], "The given TTL in POST form is not a number", "")
-		assert.Equal(t, body["cause"], "Update", "")
-	})
-}
-
-// Ensures that a key is conditionally set if it previously did not exist.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX -d prevExist=false
-//
-func TestV2CreateKeySuccess(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		v.Set("prevExist", "false")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		body := tests.ReadBodyJSON(resp)
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["value"], "XXX", "")
-	})
-}
-
-// Ensures that a key is not conditionally set because it previously existed.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX -d prevExist=false
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX -d prevExist=false -> fail
-//
-func TestV2CreateKeyFail(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		v.Set("prevExist", "false")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		tests.ReadBody(resp)
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusPreconditionFailed)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 105, "")
-		assert.Equal(t, body["message"], "Key already exists", "")
-		assert.Equal(t, body["cause"], "/foo/bar", "")
-	})
-}
-
-// Ensures that a key is conditionally set only if it previously did exist.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevExist=true
-//
-func TestV2UpdateKeySuccess(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		tests.ReadBody(resp)
-
-		v.Set("value", "YYY")
-		v.Set("prevExist", "true")
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["action"], "update", "")
-	})
-}
-
-// Ensures that a key is not conditionally set if it previously did not exist.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo?dir=true
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX -d prevExist=true
-//
-func TestV2UpdateKeyFailOnValue(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo?dir=true"), v)
-
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		v.Set("value", "YYY")
-		v.Set("prevExist", "true")
-		resp, _ = tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusNotFound)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 100, "")
-		assert.Equal(t, body["message"], "Key not found", "")
-		assert.Equal(t, body["cause"], "/foo/bar", "")
-	})
-}
-
-// Ensures that a key is not conditionally set if it previously did not exist.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo -d value=YYY -d prevExist=true -> fail
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevExist=true -> fail
-//
-func TestV2UpdateKeyFailOnMissingDirectory(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "YYY")
-		v.Set("prevExist", "true")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusNotFound)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 100, "")
-		assert.Equal(t, body["message"], "Key not found", "")
-		assert.Equal(t, body["cause"], "/foo", "")
-
-		resp, _ = tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusNotFound)
-		body = tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 100, "")
-		assert.Equal(t, body["message"], "Key not found", "")
-		assert.Equal(t, body["cause"], "/foo", "")
-	})
-}
-
-// Ensures that a key could update TTL.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo -d value=XXX -d ttl=1000 -d prevExist=true
-//   $ curl -X PUT localhost:4001/v2/keys/foo -d value=XXX -d ttl= -d prevExist=true
-//
-func TestV2UpdateKeySuccessWithTTL(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		node := (tests.ReadBodyJSON(resp)["node"]).(map[string]interface{})
-		createdIndex := node["createdIndex"]
-
-		v.Set("ttl", "1000")
-		v.Set("prevExist", "true")
-		resp, _ = tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		node = (tests.ReadBodyJSON(resp)["node"]).(map[string]interface{})
-		assert.Equal(t, node["value"], "XXX", "")
-		assert.Equal(t, node["ttl"], 1000, "")
-		assert.NotEqual(t, node["expiration"], "", "")
-		assert.Equal(t, node["createdIndex"], createdIndex, "")
-
-		v.Del("ttl")
-		resp, _ = tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		node = (tests.ReadBodyJSON(resp)["node"]).(map[string]interface{})
-		assert.Equal(t, node["value"], "XXX", "")
-		assert.Equal(t, node["ttl"], nil, "")
-		assert.Equal(t, node["expiration"], nil, "")
-		assert.Equal(t, node["createdIndex"], createdIndex, "")
-	})
-}
-
-// Ensures that a key is set only if the previous index matches.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevIndex=1
-//
-func TestV2SetKeyCASOnIndexSuccess(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		tests.ReadBody(resp)
-		v.Set("value", "YYY")
-		v.Set("prevIndex", "3")
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["action"], "compareAndSwap", "")
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["value"], "YYY", "")
-		assert.Equal(t, node["modifiedIndex"], 4, "")
-	})
-}
-
-// Ensures that a key is not set if the previous index does not match.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevIndex=10
-//
-func TestV2SetKeyCASOnIndexFail(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		tests.ReadBody(resp)
-		v.Set("value", "YYY")
-		v.Set("prevIndex", "10")
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusPreconditionFailed)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 101, "")
-		assert.Equal(t, body["message"], "Compare failed", "")
-		assert.Equal(t, body["cause"], "[10 != 3]", "")
-		assert.Equal(t, body["index"], 3, "")
-	})
-}
-
-// Ensures that an error is thrown if an invalid previous index is provided.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevIndex=bad_index
-//
-func TestV2SetKeyCASWithInvalidIndex(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "YYY")
-		v.Set("prevIndex", "bad_index")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusBadRequest)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 203, "")
-		assert.Equal(t, body["message"], "The given index in POST form is not a number", "")
-		assert.Equal(t, body["cause"], "CompareAndSwap", "")
-	})
-}
-
-// Ensures that a key is set only if the previous value matches.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevValue=XXX
-//
-func TestV2SetKeyCASOnValueSuccess(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		tests.ReadBody(resp)
-		v.Set("value", "YYY")
-		v.Set("prevValue", "XXX")
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusOK)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["action"], "compareAndSwap", "")
-		node := body["node"].(map[string]interface{})
-		assert.Equal(t, node["value"], "YYY", "")
-		assert.Equal(t, node["modifiedIndex"], 4, "")
-	})
-}
-
-// Ensures that a key is not set if the previous value does not match.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevValue=AAA
-//
-func TestV2SetKeyCASOnValueFail(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		tests.ReadBody(resp)
-		v.Set("value", "YYY")
-		v.Set("prevValue", "AAA")
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusPreconditionFailed)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 101, "")
-		assert.Equal(t, body["message"], "Compare failed", "")
-		assert.Equal(t, body["cause"], "[AAA != XXX]", "")
-		assert.Equal(t, body["index"], 3, "")
-	})
-}
-
-// Ensures that an error is returned if a blank prevValue is set.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX -d prevValue=
-//
-func TestV2SetKeyCASWithMissingValueFails(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		v.Set("prevValue", "")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusBadRequest)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 201, "")
-		assert.Equal(t, body["message"], "PrevValue is Required in POST form", "")
-		assert.Equal(t, body["cause"], "CompareAndSwap", "")
-	})
-}
-
-// Ensures that a key is not set if both previous value and index do not match.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevValue=AAA -d prevIndex=4
-//
-func TestV2SetKeyCASOnValueAndIndexFail(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		tests.ReadBody(resp)
-		v.Set("value", "YYY")
-		v.Set("prevValue", "AAA")
-		v.Set("prevIndex", "4")
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusPreconditionFailed)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 101, "")
-		assert.Equal(t, body["message"], "Compare failed", "")
-		assert.Equal(t, body["cause"], "[AAA != XXX] [4 != 3]", "")
-		assert.Equal(t, body["index"], 3, "")
-	})
-}
-
-// Ensures that a key is not set if previous value match but index does not.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevValue=XXX -d prevIndex=4
-//
-func TestV2SetKeyCASOnValueMatchAndIndexFail(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		tests.ReadBody(resp)
-		v.Set("value", "YYY")
-		v.Set("prevValue", "XXX")
-		v.Set("prevIndex", "4")
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusPreconditionFailed)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 101, "")
-		assert.Equal(t, body["message"], "Compare failed", "")
-		assert.Equal(t, body["cause"], "[4 != 3]", "")
-		assert.Equal(t, body["index"], 3, "")
-	})
-}
-
-// Ensures that a key is not set if previous index matches but value does not.
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=XXX
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=YYY -d prevValue=AAA -d prevIndex=3
-//
-func TestV2SetKeyCASOnIndexMatchAndValueFail(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "XXX")
-		fullURL := fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar")
-		resp, _ := tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		tests.ReadBody(resp)
-		v.Set("value", "YYY")
-		v.Set("prevValue", "AAA")
-		v.Set("prevIndex", "3")
-		resp, _ = tests.PutForm(fullURL, v)
-		assert.Equal(t, resp.StatusCode, http.StatusPreconditionFailed)
-		body := tests.ReadBodyJSON(resp)
-		assert.Equal(t, body["errorCode"], 101, "")
-		assert.Equal(t, body["message"], "Compare failed", "")
-		assert.Equal(t, body["cause"], "[AAA != XXX]", "")
-		assert.Equal(t, body["index"], 3, "")
-	})
-}
-
-// Ensure that we can set an empty value
-//
-//   $ curl -X PUT localhost:4001/v2/keys/foo/bar -d value=
-//
-func TestV2SetKeyCASWithEmptyValueSuccess(t *testing.T) {
-	tests.RunServer(func(s *server.Server) {
-		v := url.Values{}
-		v.Set("value", "")
-		resp, _ := tests.PutForm(fmt.Sprintf("%s%s", s.URL(), "/v2/keys/foo/bar"), v)
-		assert.Equal(t, resp.StatusCode, http.StatusCreated)
-		body := tests.ReadBody(resp)
-		assert.Equal(t, string(body), `{"action":"set","node":{"key":"/foo/bar","value":"","modifiedIndex":3,"createdIndex":3}}`)
-	})
-}
