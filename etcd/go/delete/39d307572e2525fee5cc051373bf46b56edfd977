commit 39d307572e2525fee5cc051373bf46b56edfd977
Author: Xiang Li <xiangli.cs@gmail.com>
Date:   Wed Mar 9 09:55:49 2016 -0800

    integration: fix TestV3WatchFutureRevision
    
    Fix https://github.com/coreos/etcd/issues/4730.
    
    Previously we put keys async and there might be a race when
    the watch triggers before the put receives the response. When that
    happens, put might fails to get the response since we shutdown the server
    when watch triggers.

diff --git a/integration/v3_watch_test.go b/integration/v3_watch_test.go
index 41fa34a..4540462 100644
--- a/integration/v3_watch_test.go
+++ b/integration/v3_watch_test.go
@@ -319,20 +319,17 @@ func TestV3WatchFutureRevision(t *testing.T) {
 		t.Fatal("create = %v, want %v", cresp.Created, true)
 	}
 
-	// asynchronously create keys
-	go func() {
-		kvc := toGRPC(clus.RandClient()).KV
-		for {
-			req := &pb.PutRequest{Key: wkey, Value: []byte("bar")}
-			resp, rerr := kvc.Put(context.TODO(), req)
-			if rerr != nil {
-				t.Fatalf("couldn't put key (%v)", rerr)
-			}
-			if resp.Header.Revision == wrev {
-				return
-			}
+	kvc := toGRPC(clus.RandClient()).KV
+	for {
+		req := &pb.PutRequest{Key: wkey, Value: []byte("bar")}
+		resp, rerr := kvc.Put(context.TODO(), req)
+		if rerr != nil {
+			t.Fatalf("couldn't put key (%v)", rerr)
 		}
-	}()
+		if resp.Header.Revision == wrev {
+			break
+		}
+	}
 
 	// ensure watcher request created a new watcher
 	cresp, err = wStream.Recv()
