commit adeb101e04343cf179457f513b075a3e6c62e8cf
Author: Xiang Li <xiangli.cs@gmail.com>
Date:   Fri Jun 5 17:10:27 2015 -0700

    etcdctl: remove old stuff

diff --git a/etcdctl/command/cluster_health.go b/etcdctl/command/cluster_health.go
index e62e801..12aac68 100644
--- a/etcdctl/command/cluster_health.go
+++ b/etcdctl/command/cluster_health.go
@@ -37,10 +37,6 @@ func handleClusterHealth(c *cli.Context) {
 	client := etcd.NewClient(endpoints)
 	client.SetTransport(tr)
 
-	if c.GlobalBool("debug") {
-		go dumpCURL(client)
-	}
-
 	if ok := client.SyncCluster(); !ok {
 		handleError(ExitBadConnection, errors.New("cannot sync with the cluster using endpoints "+strings.Join(endpoints, ", ")))
 	}
diff --git a/etcdctl/command/format.go b/etcdctl/command/format.go
index fb3e07b..55661e8 100644
--- a/etcdctl/command/format.go
+++ b/etcdctl/command/format.go
@@ -19,61 +19,9 @@ import (
 	"fmt"
 	"os"
 
-	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/coreos/go-etcd/etcd"
 	"github.com/coreos/etcd/client"
 )
 
-// printKey writes the etcd response to STDOUT in the given format.
-func printKey(resp *etcd.Response, format string) {
-	// printKey is only for keys, error on directories
-	if resp.Node.Dir == true {
-		fmt.Fprintln(os.Stderr, fmt.Sprintf("Cannot print key [%s: Is a directory]", resp.Node.Key))
-		os.Exit(1)
-	}
-	printKeyOnly(resp, format)
-}
-
-// printAll prints the etcd response in the given format in its best efforts.
-func printAll(resp *etcd.Response, format string) {
-	if resp.Node.Dir == true {
-		return
-	}
-	printKeyOnly(resp, format)
-}
-
-// printKeyOnly only supports to print key correctly.
-func printKeyOnly(resp *etcd.Response, format string) {
-	// Format the result.
-	switch format {
-	case "simple":
-		fmt.Println(resp.Node.Value)
-	case "extended":
-		// Extended prints in a rfc2822 style format
-		fmt.Println("Key:", resp.Node.Key)
-		fmt.Println("Created-Index:", resp.Node.CreatedIndex)
-		fmt.Println("Modified-Index:", resp.Node.ModifiedIndex)
-
-		if resp.PrevNode != nil {
-			fmt.Println("PrevNode.Value:", resp.PrevNode.Value)
-		}
-
-		fmt.Println("TTL:", resp.Node.TTL)
-		fmt.Println("Etcd-Index:", resp.EtcdIndex)
-		fmt.Println("Raft-Index:", resp.RaftIndex)
-		fmt.Println("Raft-Term:", resp.RaftTerm)
-		fmt.Println("")
-		fmt.Println(resp.Node.Value)
-	case "json":
-		b, err := json.Marshal(resp)
-		if err != nil {
-			panic(err)
-		}
-		fmt.Println(string(b))
-	default:
-		fmt.Fprintln(os.Stderr, "Unsupported output format:", format)
-	}
-}
-
 // printResponseKey only supports to print key correctly.
 func printResponseKey(resp *client.Response, format string) {
 	// Format the result.
diff --git a/etcdctl/command/handle.go b/etcdctl/command/handle.go
deleted file mode 100644
index d19f3ca..0000000
--- a/etcdctl/command/handle.go
+++ /dev/null
@@ -1,136 +0,0 @@
-// Copyright 2015 CoreOS, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package command
-
-import (
-	"errors"
-	"fmt"
-	"os"
-	"strings"
-
-	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/bgentry/speakeasy"
-	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/codegangsta/cli"
-	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/coreos/go-etcd/etcd"
-)
-
-type handlerFunc func(*cli.Context, *etcd.Client) (*etcd.Response, error)
-type printFunc func(*etcd.Response, string)
-type contextualPrintFunc func(*cli.Context, *etcd.Response, string)
-
-// dumpCURL blindly dumps all curl output to os.Stderr
-func dumpCURL(client *etcd.Client) {
-	client.OpenCURL()
-	for {
-		fmt.Fprintf(os.Stderr, "Curl-Example: %s\n", client.RecvCURL())
-	}
-}
-
-func getUsernamePasswordFromFlag(usernameFlag string) (username string, password string, err error) {
-	colon := strings.Index(usernameFlag, ":")
-	if colon == -1 {
-		username = usernameFlag
-		// Prompt for the password.
-		password, err = speakeasy.Ask("Password: ")
-		if err != nil {
-			return "", "", err
-		}
-	} else {
-		username = usernameFlag[:colon]
-		password = usernameFlag[colon+1:]
-	}
-	return username, password, nil
-}
-
-func prepAuth(client *etcd.Client, usernameFlag string) error {
-	username, password, err := getUsernamePasswordFromFlag(usernameFlag)
-	if err != nil {
-		return err
-	}
-	client.SetCredentials(username, password)
-	return nil
-}
-
-// rawhandle wraps the command function handlers and sets up the
-// environment but performs no output formatting.
-func rawhandle(c *cli.Context, fn handlerFunc) (*etcd.Response, error) {
-	endpoints, err := getEndpoints(c)
-	if err != nil {
-		return nil, err
-	}
-
-	tr, err := getTransport(c)
-	if err != nil {
-		return nil, err
-	}
-
-	client := etcd.NewClient(endpoints)
-	client.SetTransport(tr)
-
-	username := c.GlobalString("username")
-	if username != "" {
-		err := prepAuth(client, username)
-		if err != nil {
-			return nil, err
-		}
-	}
-
-	if c.GlobalBool("debug") {
-		go dumpCURL(client)
-	}
-
-	// Sync cluster.
-	if !c.GlobalBool("no-sync") {
-		if ok := client.SyncCluster(); !ok {
-			handleError(ExitBadConnection, errors.New("cannot sync with the cluster using endpoints "+strings.Join(endpoints, ", ")))
-		}
-	}
-
-	if c.GlobalBool("debug") {
-		fmt.Fprintf(os.Stderr, "Cluster-Endpoints: %s\n", strings.Join(client.GetCluster(), ", "))
-	}
-
-	// Execute handler function.
-	return fn(c, client)
-}
-
-// handlePrint wraps the command function handlers to parse global flags
-// into a client and to properly format the response objects.
-func handlePrint(c *cli.Context, fn handlerFunc, pFn printFunc) {
-	resp, err := rawhandle(c, fn)
-
-	// Print error and exit, if necessary.
-	if err != nil {
-		handleError(ExitServerError, err)
-	}
-
-	if resp != nil && pFn != nil {
-		pFn(resp, c.GlobalString("output"))
-	}
-}
-
-// handleDir handles a request that wants to do operations on a single dir.
-// Dir cannot be printed out, so we set NIL print function here.
-func handleDir(c *cli.Context, fn handlerFunc) {
-	handlePrint(c, fn, nil)
-}
-
-// handleKey handles a request that wants to do operations on a single key.
-func handleKey(c *cli.Context, fn handlerFunc) {
-	handlePrint(c, fn, printKey)
-}
-
-func handleAll(c *cli.Context, fn handlerFunc) {
-	handlePrint(c, fn, printAll)
-}
diff --git a/etcdctl/command/import_snap_command.go b/etcdctl/command/import_snap_command.go
index 980e033..d1251ad 100644
--- a/etcdctl/command/import_snap_command.go
+++ b/etcdctl/command/import_snap_command.go
@@ -68,10 +68,6 @@ func handleImportSnap(c *cli.Context) {
 		client := etcd.NewClient(endpoints)
 		client.SetTransport(tr)
 
-		if c.GlobalBool("debug") {
-			go dumpCURL(client)
-		}
-
 		if ok := client.SyncCluster(); !ok {
 			handleError(ExitBadConnection, errors.New("cannot sync with the cluster using endpoints "+strings.Join(endpoints, ", ")))
 		}
diff --git a/etcdctl/command/util.go b/etcdctl/command/util.go
index c5a5d64..a6cf4aa 100644
--- a/etcdctl/command/util.go
+++ b/etcdctl/command/util.go
@@ -24,6 +24,7 @@ import (
 	"os"
 	"strings"
 
+	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/bgentry/speakeasy"
 	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/codegangsta/cli"
 	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
 	"github.com/coreos/etcd/client"
@@ -116,6 +117,22 @@ func getTransport(c *cli.Context) (*http.Transport, error) {
 	return transport.NewTransport(tls)
 }
 
+func getUsernamePasswordFromFlag(usernameFlag string) (username string, password string, err error) {
+	colon := strings.Index(usernameFlag, ":")
+	if colon == -1 {
+		username = usernameFlag
+		// Prompt for the password.
+		password, err = speakeasy.Ask("Password: ")
+		if err != nil {
+			return "", "", err
+		}
+	} else {
+		username = usernameFlag[:colon]
+		password = usernameFlag[colon+1:]
+	}
+	return username, password, nil
+}
+
 func mustNewKeyAPI(c *cli.Context) client.KeysAPI {
 	return client.NewKeysAPI(mustNewClient(c))
 }
