commit 38dd680f2e989a2df58e719ca03e7c55f149f1c6
Author: Xiang Li <xiangli.cs@gmail.com>
Date:   Tue Sep 15 16:08:07 2015 -0700

    godep: use github.com/cheggaaa/pb

diff --git a/Godeps/Godeps.json b/Godeps/Godeps.json
index b69a86e..d73d719 100644
--- a/Godeps/Godeps.json
+++ b/Godeps/Godeps.json
@@ -1,6 +1,6 @@
 {
 	"ImportPath": "github.com/coreos/etcd",
-	"GoVersion": "go1.4.2",
+	"GoVersion": "go1.5",
 	"Packages": [
 		"./..."
 	],
@@ -28,6 +28,10 @@
 			"Rev": "3e36af6d3af0e56fa3da71099f864933dea3d9fb"
 		},
 		{
+			"ImportPath": "github.com/cheggaaa/pb",
+			"Rev": "da1f27ad1d9509b16f65f52fd9d8138b0f2dc7b2"
+		},
+		{
 			"ImportPath": "github.com/codegangsta/cli",
 			"Comment": "1.2.0-26-gf7ebb76",
 			"Rev": "f7ebb761e83e21225d1d8954fde853bf8edd46c4"
@@ -104,10 +108,6 @@
 			"Rev": "ee2372b58cee877abe07cde670d04d3b3bac5ee6"
 		},
 		{
-			"ImportPath": "github.com/rakyll/pb",
-			"Rev": "dc507ad06b7462501281bb4691ee43f0b1d1ec37"
-		},
-		{
 			"ImportPath": "github.com/stretchr/testify/assert",
 			"Rev": "9cc77fa25329013ce07362c7742952ff887361f2"
 		},
diff --git a/Godeps/_workspace/src/github.com/rakyll/pb/LICENSE b/Godeps/_workspace/src/github.com/rakyll/pb/LICENSE
deleted file mode 100644
index 13ef3fe..0000000
--- a/Godeps/_workspace/src/github.com/rakyll/pb/LICENSE
+++ /dev/null
@@ -1,12 +0,0 @@
-Copyright (c) 2012, Sergey Cherepanov
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
-
-* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
-
-* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
-
-* Neither the name of the author nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
diff --git a/Godeps/_workspace/src/github.com/rakyll/pb/README.md b/Godeps/_workspace/src/github.com/rakyll/pb/README.md
deleted file mode 100644
index 5e475e8..0000000
--- a/Godeps/_workspace/src/github.com/rakyll/pb/README.md
+++ /dev/null
@@ -1,92 +0,0 @@
-## Terminal progress bar for Go  
-
-Simple progress bar for console programms. 
-    
-
-### Installation
-```
-go get github.com/cheggaaa/pb
-```   
-
-### Usage   
-```Go
-package main
-
-import (
-	"github.com/cheggaaa/pb"
-	"time"
-)
-
-func main() {
-	count := 100000
-	bar := pb.StartNew(count)
-	for i := 0; i < count; i++ {
-		bar.Increment()
-		time.Sleep(time.Millisecond)
-	}
-	bar.FinishPrint("The End!")
-}
-```   
-Result will be like this:
-```
-> go run test.go
-37158 / 100000 [================>_______________________________] 37.16% 1m11s
-```
-
-
-More functions?  
-```Go  
-// create bar
-bar := pb.New(count)
-
-// refresh info every second (default 200ms)
-bar.SetRefreshRate(time.Second)
-
-// show percents (by default already true)
-bar.ShowPercent = true
-
-// show bar (by default already true)
-bar.ShowBar = true
-
-// no need counters
-bar.ShowCounters = false
-
-// show "time left"
-bar.ShowTimeLeft = true
-
-// show average speed    
-bar.ShowSpeed = true
-
-// convert output to readable format (like KB, MB)     
-bar.SetUnits(pb.U_BYTES)
-
-// and start
-bar.Start()
-``` 
-
-Want handle progress of io operations?    
-```Go
-// create and start bar
-bar := pb.New(myDataLen).SetUnits(pb.U_BYTES)
-bar.Start()
-
-// my io.Reader
-r := myReader
-
-// my io.Writer
-w := myWriter
-
-// create multi writer
-writer := io.MultiWriter(w, bar)
-
-// and copy
-io.Copy(writer, r)
-
-// show example/copy/copy.go for advanced example
-
-```
-
-Not like the looks?
-```Go
-bar.Format("<.- >")
-```
diff --git a/Godeps/_workspace/src/github.com/rakyll/pb/example/copy/copy.go b/Godeps/_workspace/src/github.com/rakyll/pb/example/copy/copy.go
deleted file mode 100644
index 87738b2..0000000
--- a/Godeps/_workspace/src/github.com/rakyll/pb/example/copy/copy.go
+++ /dev/null
@@ -1,83 +0,0 @@
-package main
-
-import (
-	"github.com/cheggaaa/pb"
-	"os"
-	"fmt"
-	"io"
-	"time"
-	"strings"
-	"net/http"
-	"strconv"
-)
-
-func main() {
-	// check args
-	if len(os.Args) < 3 {
-		printUsage()
-		return
-	}
-	sourceName, destName := os.Args[1], os.Args[2]
-	
-	// check source
-	var source io.Reader
-	var sourceSize int64
-	if strings.HasPrefix(sourceName, "http://") {
-		// open as url	
-		resp, err := http.Get(sourceName)
-		if err != nil {
-			fmt.Printf("Can't get %s: %v\n", sourceName, err)
-			return
-		}
-		defer resp.Body.Close()
-		if resp.StatusCode != http.StatusOK {
-			fmt.Printf("Server return non-200 status: %v\n", resp.Status)
-			return
-		}
-		i, _ := strconv.Atoi(resp.Header.Get("Content-Length"))
-		sourceSize = int64(i)
-		source = resp.Body
-	} else {
-		// open as file
-		s, err := os.Open(sourceName)
-		if err != nil {
-			fmt.Printf("Can't open %s: %v\n", sourceName, err)
-			return
-		}
-		defer s.Close()
-		// get source size
-		sourceStat, err := s.Stat()
-		if err != nil {
-			fmt.Printf("Can't stat %s: %v\n", sourceName, err)
-			return
-		}
-		sourceSize = sourceStat.Size()
-		source = s
-	}
-	
-	
-	
-	// create dest
-	dest, err := os.Create(destName)
-	if err != nil {
-		fmt.Printf("Can't create %s: %v\n", destName, err)
-		return
-	}
-	defer dest.Close()
-	
-	// create bar	
-	bar := pb.New(int(sourceSize)).SetUnits(pb.U_BYTES).SetRefreshRate(time.Millisecond * 10)
-	bar.ShowSpeed = true
-	bar.Start()
-	
-	// create multi writer
-	writer := io.MultiWriter(dest, bar)
-	
-	// and copy
-	io.Copy(writer, source)
-	bar.Finish()
-}
-
-func printUsage() {
-	fmt.Println("copy [source file or url] [dest file]")
-}
diff --git a/Godeps/_workspace/src/github.com/rakyll/pb/example/pb.go b/Godeps/_workspace/src/github.com/rakyll/pb/example/pb.go
deleted file mode 100644
index 140ba03..0000000
--- a/Godeps/_workspace/src/github.com/rakyll/pb/example/pb.go
+++ /dev/null
@@ -1,30 +0,0 @@
-package main
-
-import (
-	"github.com/cheggaaa/pb"
-	"time"
-)
-
-func main() {
-	count := 5000
-	bar := pb.New(count)
-
-	// show percents (by default already true)
-	bar.ShowPercent = true
-
-	// show bar (by default already true)
-	bar.ShowPercent = true
-
-	// no need counters
-	bar.ShowCounters = true
-
-	bar.ShowTimeLeft = true
-
-	// and start
-	bar.Start()
-	for i := 0; i < count; i++ {
-		bar.Increment()
-		time.Sleep(time.Millisecond)
-	}
-	bar.FinishPrint("The End!")
-}
diff --git a/Godeps/_workspace/src/github.com/rakyll/pb/format.go b/Godeps/_workspace/src/github.com/rakyll/pb/format.go
deleted file mode 100644
index b91c9f3..0000000
--- a/Godeps/_workspace/src/github.com/rakyll/pb/format.go
+++ /dev/null
@@ -1,44 +0,0 @@
-package pb
-
-import (
-	"fmt"
-	"strings"
-	"strconv"
-)
-
-
-const (
-	// By default, without type handle
-	U_NO = 0
-	// Handle as b, Kb, Mb, etc
-	U_BYTES = 1
-)
-
-// Format integer
-func Format(i int64, units int) string {
-	switch units {
-		case U_BYTES:
-			return FormatBytes(i)
-	}
-	// by default just convert to string
-	return strconv.Itoa(int(i))
-}
-
-
-// Convert bytes to human readable string. Like a 2 MiB, 64.2 KiB, 52 B
-func FormatBytes(i int64) (result string) {
-	switch {
-	case i > (1024 * 1024 * 1024 * 1024):
-		result = fmt.Sprintf("%#.02f TB", float64(i)/1024/1024/1024/1024)
-	case i > (1024 * 1024 * 1024):
-		result = fmt.Sprintf("%#.02f GB", float64(i)/1024/1024/1024)
-	case i > (1024 * 1024):
-		result = fmt.Sprintf("%#.02f MB", float64(i)/1024/1024)
-	case i > 1024:
-		result = fmt.Sprintf("%#.02f KB", float64(i)/1024)
-	default:
-		result = fmt.Sprintf("%d B", i)
-	}
-	result = strings.Trim(result, " ")
-	return
-}
diff --git a/Godeps/_workspace/src/github.com/rakyll/pb/pb.go b/Godeps/_workspace/src/github.com/rakyll/pb/pb.go
deleted file mode 100644
index 3e3934b..0000000
--- a/Godeps/_workspace/src/github.com/rakyll/pb/pb.go
+++ /dev/null
@@ -1,267 +0,0 @@
-package pb
-
-import (
-	"fmt"
-	"io"
-	"math"
-	"strings"
-	"sync/atomic"
-	"time"
-)
-
-const (
-	// Default refresh rate - 200ms
-	DEFAULT_REFRESH_RATE = time.Millisecond * 200
-	FORMAT               = "[=>-]"
-)
-
-// DEPRECATED
-// variables for backward compatibility, from now do not work
-// use pb.Format and pb.SetRefreshRate
-var (
-	DefaultRefreshRate                         = DEFAULT_REFRESH_RATE
-	BarStart, BarEnd, Empty, Current, CurrentN string
-)
-
-// Create new progress bar object
-func New(total int) (pb *ProgressBar) {
-	pb = &ProgressBar{
-		Total:        int64(total),
-		RefreshRate:  DEFAULT_REFRESH_RATE,
-		ShowPercent:  true,
-		ShowCounters: true,
-		ShowBar:      true,
-		ShowTimeLeft: true,
-	}
-	pb.Format(FORMAT)
-	return
-}
-
-// Create new object and start
-func StartNew(total int) (pb *ProgressBar) {
-	pb = New(total)
-	pb.Start()
-	return
-}
-
-// Callback for custom output
-// For example:
-// bar.Callback = func(s string) {
-//     mySuperPrint(s)
-// }
-//
-type Callback func(out string)
-
-type ProgressBar struct {
-	current int64 // current must be first member of struct (https://code.google.com/p/go/issues/detail?id=5278)
-
-	Total                            int64
-	RefreshRate                      time.Duration
-	ShowPercent, ShowCounters        bool
-	ShowSpeed, ShowTimeLeft, ShowBar bool
-	Output                           io.Writer
-	Callback                         Callback
-	NotPrint                         bool
-	Units                            int
-
-	isFinish  bool
-	startTime time.Time
-
-	BarStart string
-	BarEnd   string
-	Empty    string
-	Current  string
-	CurrentN string
-}
-
-// Start print
-func (pb *ProgressBar) Start() {
-	pb.startTime = time.Now()
-	if pb.Total == 0 {
-		pb.ShowBar = false
-		pb.ShowTimeLeft = false
-		pb.ShowPercent = false
-	}
-	go pb.writer()
-}
-
-// Increment current value
-func (pb *ProgressBar) Increment() int {
-	return pb.Add(1)
-}
-
-// Set current value
-func (pb *ProgressBar) Set(current int) {
-	atomic.StoreInt64(&pb.current, int64(current))
-}
-
-// Add to current value
-func (pb *ProgressBar) Add(add int) int {
-	return int(atomic.AddInt64(&pb.current, int64(add)))
-}
-
-// Set custom format for bar
-// Example: bar.Format("[=>_]")
-func (pb *ProgressBar) Format(format string) (bar *ProgressBar) {
-	bar = pb
-	formatEntries := strings.Split(format, "")
-	if len(formatEntries) != 5 {
-		return
-	}
-	pb.BarStart = formatEntries[0]
-	pb.BarEnd = formatEntries[4]
-	pb.Empty = formatEntries[3]
-	pb.Current = formatEntries[1]
-	pb.CurrentN = formatEntries[2]
-	return
-}
-
-// Set bar refresh rate
-func (pb *ProgressBar) SetRefreshRate(rate time.Duration) (bar *ProgressBar) {
-	bar = pb
-	pb.RefreshRate = rate
-	return
-}
-
-// Set units
-// bar.SetUnits(U_NO) - by default
-// bar.SetUnits(U_BYTES) - for Mb, Kb, etc
-func (pb *ProgressBar) SetUnits(units int) (bar *ProgressBar) {
-	bar = pb
-	switch units {
-		case U_NO, U_BYTES:
-			pb.Units = units
-	}
-	return
-}
-
-// End print
-func (pb *ProgressBar) Finish() {
-	pb.isFinish = true
-	pb.write(atomic.LoadInt64(&pb.current))
-	if !pb.NotPrint {
-		fmt.Println()
-	}
-}
-
-// End print and write string 'str'
-func (pb *ProgressBar) FinishPrint(str string) {
-	pb.Finish()
-	fmt.Println(str)
-}
-
-// implement io.Writer
-func (pb *ProgressBar) Write(p []byte) (n int, err error) {
-	n = len(p)
-	pb.Add(n)
-	return
-}
-
-// implement io.Reader
-func (pb *ProgressBar) Read(p []byte) (n int, err error) {
-	n = len(p)
-	pb.Add(n)
-	return
-}
-
-func (pb *ProgressBar) write(current int64) {
-	width, _ := terminalWidth()
-	var percentBox, countersBox, timeLeftBox, speedBox, barBox, end, out string
-
-	// percents
-	if pb.ShowPercent {
-		percent := float64(current) / (float64(pb.Total) / float64(100))
-		percentBox = fmt.Sprintf(" %#.02f %% ", percent)
-	}
-
-	// counters
-	if pb.ShowCounters {
-		if pb.Total > 0 {
-			countersBox = fmt.Sprintf("%s / %s ", Format(current, pb.Units), Format(pb.Total, pb.Units))
-		} else {
-			countersBox = Format(current, pb.Units) + " "
-		}
-	}
-
-	// time left
-	if pb.ShowTimeLeft && current > 0 {
-		fromStart := time.Now().Sub(pb.startTime)
-		perEntry := fromStart / time.Duration(current)
-		left := time.Duration(pb.Total-current) * perEntry
-		left = (left / time.Second) * time.Second
-		if left > 0 {
-			timeLeftBox = left.String()
-		}
-	}
-
-	// speed
-	if pb.ShowSpeed && current > 0 {
-		fromStart := time.Now().Sub(pb.startTime)
-		speed := float64(current) / (float64(fromStart) / float64(time.Second))
-		speedBox = Format(int64(speed), pb.Units) + "/s "
-	}
-
-	// bar
-	if pb.ShowBar {
-		size := width - len(countersBox+pb.BarStart+pb.BarEnd+percentBox+timeLeftBox+speedBox)
-		if size > 0 {
-			curCount := int(math.Ceil((float64(current) / float64(pb.Total)) * float64(size)))
-			emptCount := size - curCount
-			barBox = pb.BarStart
-			if emptCount < 0 {
-				emptCount = 0
-			}
-			if curCount > size {
-				curCount = size
-			}
-			if emptCount <= 0 {
-				barBox += strings.Repeat(pb.Current, curCount)
-			} else if curCount > 0 {
-				barBox += strings.Repeat(pb.Current, curCount-1) + pb.CurrentN
-			}
-
-			barBox += strings.Repeat(pb.Empty, emptCount) + pb.BarEnd
-		}
-	}
-
-	// check len
-	out = countersBox + barBox + percentBox + speedBox + timeLeftBox
-	if len(out) < width {
-		end = strings.Repeat(" ", width-len(out))
-	}
-
-	out = countersBox + barBox + percentBox + speedBox + timeLeftBox
-
-	// and print!
-	switch {
-	case pb.Output != nil:
-		fmt.Fprint(pb.Output, out+end)
-	case pb.Callback != nil:
-		pb.Callback(out + end)
-	case !pb.NotPrint:
-		fmt.Print("\r" + out + end)
-	}
-}
-
-func (pb *ProgressBar) writer() {
-	var c, oc int64
-	oc = -1
-	for {
-		if pb.isFinish {
-			break
-		}
-		c = atomic.LoadInt64(&pb.current)
-		if c != oc {
-			pb.write(c)
-			oc = c
-		}
-		time.Sleep(pb.RefreshRate)
-	}
-}
-
-type window struct {
-	Row    uint16
-	Col    uint16
-	Xpixel uint16
-	Ypixel uint16
-}
diff --git a/Godeps/_workspace/src/github.com/rakyll/pb/pb_nix.go b/Godeps/_workspace/src/github.com/rakyll/pb/pb_nix.go
deleted file mode 100644
index 1f606aa..0000000
--- a/Godeps/_workspace/src/github.com/rakyll/pb/pb_nix.go
+++ /dev/null
@@ -1,35 +0,0 @@
-// +build linux darwin freebsd
-
-package pb
-
-import (
-	"runtime"
-	"syscall"
-	"unsafe"
-)
-
-const (
-	TIOCGWINSZ     = 0x5413
-	TIOCGWINSZ_OSX = 1074295912
-)
-
-func bold(str string) string {
-	return "\033[1m" + str + "\033[0m"
-}
-
-func terminalWidth() (int, error) {
-	w := new(window)
-	tio := syscall.TIOCGWINSZ
-	if runtime.GOOS == "darwin" {
-		tio = TIOCGWINSZ_OSX
-	}
-	res, _, err := syscall.Syscall(syscall.SYS_IOCTL,
-		uintptr(syscall.Stdin),
-		uintptr(tio),
-		uintptr(unsafe.Pointer(w)),
-	)
-	if int(res) == -1 {
-		return 0, err
-	}
-	return int(w.Col), nil
-}
diff --git a/Godeps/_workspace/src/github.com/rakyll/pb/pb_win.go b/Godeps/_workspace/src/github.com/rakyll/pb/pb_win.go
deleted file mode 100644
index 42a64f9..0000000
--- a/Godeps/_workspace/src/github.com/rakyll/pb/pb_win.go
+++ /dev/null
@@ -1,16 +0,0 @@
-// +build windows
-
-package pb
-
-import (
-	"github.com/olekukonko/ts"
-)
-
-func bold(str string) string {
-	return str
-}
-
-func terminalWidth() (int, error) {
-	size , err := ts.GetSize()
-	return size.Col() , err
-}
diff --git a/tools/v3benchmark/main.go b/tools/v3benchmark/main.go
index 613a895..af22940 100644
--- a/tools/v3benchmark/main.go
+++ b/tools/v3benchmark/main.go
@@ -21,7 +21,7 @@ import (
 	"sync"
 	"time"
 
-	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/rakyll/pb"
+	"github.com/coreos/etcd/Godeps/_workspace/src/github.com/cheggaaa/pb"
 	"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc"
 	"github.com/coreos/etcd/etcdserver/etcdserverpb"
 )
